// Generated by Haxe 3.4.0
(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
Math.__name__ = true;
var Test = function() { };
Test.__name__ = true;
Test.main = function() {
	Test.canvas = window.document.getElementById("canvas");
	console.log(Test.canvas);
	Test.cxt = Test.canvas.getContext("2d");
	var drawingAdapter = new com_mun_view_drawingImpl_DrawingAdapter(Test.cxt);
	var circuitDiagram = new com_mun_model_component_CircuitDiagram();
	var and_gate = new com_mun_model_gates_AND();
	var button = window.document.createElement("button");
	button.textContent = "AND Gate";
	button.onclick = function(event) {
		drawingAdapter.drawAndShape(60,50,40,40,com_mun_model_enumeration_Orientation.SOUTH);
	};
	window.document.body.appendChild(button);
	var component = new com_mun_model_component_Component(60,50,40,40,com_mun_model_enumeration_Orientation.SOUTH,and_gate,2);
	var drawAnd = new com_mun_view_drawComponents_DrawAND(component,drawingAdapter);
	drawAnd.drawCorrespondingComponent();
	var flipflopKind = new com_mun_model_gates_FlipFlop();
	var flipflop = new com_mun_model_component_Component(110,50,40,40,com_mun_model_enumeration_Orientation.SOUTH,flipflopKind);
	var drawFlipflp = new com_mun_view_drawComponents_DrawFlipFlop(flipflop,drawingAdapter);
	drawFlipflp.drawCorrespondingComponent();
	var muxkind = new com_mun_model_gates_MUX();
	var mux = new com_mun_model_component_Component(160,50,40,40,com_mun_model_enumeration_Orientation.SOUTH,muxkind);
	var drawMux = new com_mun_view_drawComponents_DrawMUX(mux,drawingAdapter);
	drawMux.drawCorrespondingComponent();
};
var com_mun_model_component_CircuitDiagram = function() {
};
com_mun_model_component_CircuitDiagram.__name__ = true;
var com_mun_model_component_Component = function(xPosition,yPosition,height,width,orientation,componentKind,inportNum) {
	if(inportNum == null) {
		inportNum = 2;
	}
	this.outportArray = [];
	this.inportArray = [];
	this.xPosition = xPosition;
	this.yPosition = yPosition;
	this.height = height;
	this.width = width;
	this.orientation = orientation;
	this.componentKind = componentKind;
	this.inportsNum = inportNum;
	this.delay = 0;
	var portArray = [];
	portArray = this.componentKind.createPorts(xPosition,yPosition,height,width,orientation,inportNum);
	var _g1 = 0;
	var _g = portArray.length;
	while(_g1 < _g) {
		var o = _g1++;
		var port = portArray[o];
		if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.INPUT || port.get_portDescription() == com_mun_model_enumeration_IOTYPE.CLK || port.get_portDescription() == com_mun_model_enumeration_IOTYPE.D || port.get_portDescription() == com_mun_model_enumeration_IOTYPE.S) {
			this.inportArray.push(port);
		} else {
			this.outportArray.push(port);
		}
	}
};
com_mun_model_component_Component.__name__ = true;
com_mun_model_component_Component.prototype = {
	get_xPosition: function() {
		return this.xPosition;
	}
	,get_yPosition: function() {
		return this.yPosition;
	}
	,get_orientation: function() {
		return this.orientation;
	}
	,get_inportArray: function() {
		return this.inportArray;
	}
	,get_outportArray: function() {
		return this.outportArray;
	}
	,get_height: function() {
		return this.height;
	}
	,get_width: function() {
		return this.width;
	}
};
var com_mun_model_component_Port = function() { };
com_mun_model_component_Port.__name__ = true;
var com_mun_model_component_Inport = function(xPosition,yPosition) {
	this.xPosition = xPosition;
	this.yPosition = yPosition;
	this.portDescription = com_mun_model_enumeration_IOTYPE.INPUT;
};
com_mun_model_component_Inport.__name__ = true;
com_mun_model_component_Inport.__interfaces__ = [com_mun_model_component_Port];
com_mun_model_component_Inport.prototype = {
	get_xPosition: function() {
		return this.xPosition;
	}
	,get_yPosition: function() {
		return this.yPosition;
	}
	,get_portDescription: function() {
		return this.portDescription;
	}
	,set_portDescription: function(value) {
		this.portDescription = value;
	}
	,get_sequence: function() {
		return this.sequence;
	}
	,set_sequence: function(sequence) {
		this.sequence = sequence;
	}
};
var com_mun_model_component_Outport = function(xPosition,yPosition) {
	this.xPosition = xPosition;
	this.yPosition = yPosition;
	this.portDescription = com_mun_model_enumeration_IOTYPE.OUTPUT;
};
com_mun_model_component_Outport.__name__ = true;
com_mun_model_component_Outport.__interfaces__ = [com_mun_model_component_Port];
com_mun_model_component_Outport.prototype = {
	get_xPosition: function() {
		return this.xPosition;
	}
	,get_yPosition: function() {
		return this.yPosition;
	}
	,get_portDescription: function() {
		return this.portDescription;
	}
	,set_portDescription: function(value) {
		this.portDescription = value;
	}
	,get_sequence: function() {
		return this.sequence;
	}
	,set_sequence: function(sequence) {
		this.sequence = sequence;
	}
};
var com_mun_model_drawingInterface_DrawingAdapterI = function() { };
com_mun_model_drawingInterface_DrawingAdapterI.__name__ = true;
var com_mun_model_enumeration_IOTYPE = { __ename__ : true, __constructs__ : ["INPUT","S","D","CLK","OUTPUT","Q","QN"] };
com_mun_model_enumeration_IOTYPE.INPUT = ["INPUT",0];
com_mun_model_enumeration_IOTYPE.INPUT.toString = $estr;
com_mun_model_enumeration_IOTYPE.INPUT.__enum__ = com_mun_model_enumeration_IOTYPE;
com_mun_model_enumeration_IOTYPE.S = ["S",1];
com_mun_model_enumeration_IOTYPE.S.toString = $estr;
com_mun_model_enumeration_IOTYPE.S.__enum__ = com_mun_model_enumeration_IOTYPE;
com_mun_model_enumeration_IOTYPE.D = ["D",2];
com_mun_model_enumeration_IOTYPE.D.toString = $estr;
com_mun_model_enumeration_IOTYPE.D.__enum__ = com_mun_model_enumeration_IOTYPE;
com_mun_model_enumeration_IOTYPE.CLK = ["CLK",3];
com_mun_model_enumeration_IOTYPE.CLK.toString = $estr;
com_mun_model_enumeration_IOTYPE.CLK.__enum__ = com_mun_model_enumeration_IOTYPE;
com_mun_model_enumeration_IOTYPE.OUTPUT = ["OUTPUT",4];
com_mun_model_enumeration_IOTYPE.OUTPUT.toString = $estr;
com_mun_model_enumeration_IOTYPE.OUTPUT.__enum__ = com_mun_model_enumeration_IOTYPE;
com_mun_model_enumeration_IOTYPE.Q = ["Q",5];
com_mun_model_enumeration_IOTYPE.Q.toString = $estr;
com_mun_model_enumeration_IOTYPE.Q.__enum__ = com_mun_model_enumeration_IOTYPE;
com_mun_model_enumeration_IOTYPE.QN = ["QN",6];
com_mun_model_enumeration_IOTYPE.QN.toString = $estr;
com_mun_model_enumeration_IOTYPE.QN.__enum__ = com_mun_model_enumeration_IOTYPE;
var com_mun_model_enumeration_Orientation = { __ename__ : true, __constructs__ : ["NORTH","SOUTH","WEST","EAST"] };
com_mun_model_enumeration_Orientation.NORTH = ["NORTH",0];
com_mun_model_enumeration_Orientation.NORTH.toString = $estr;
com_mun_model_enumeration_Orientation.NORTH.__enum__ = com_mun_model_enumeration_Orientation;
com_mun_model_enumeration_Orientation.SOUTH = ["SOUTH",1];
com_mun_model_enumeration_Orientation.SOUTH.toString = $estr;
com_mun_model_enumeration_Orientation.SOUTH.__enum__ = com_mun_model_enumeration_Orientation;
com_mun_model_enumeration_Orientation.WEST = ["WEST",2];
com_mun_model_enumeration_Orientation.WEST.toString = $estr;
com_mun_model_enumeration_Orientation.WEST.__enum__ = com_mun_model_enumeration_Orientation;
com_mun_model_enumeration_Orientation.EAST = ["EAST",3];
com_mun_model_enumeration_Orientation.EAST.toString = $estr;
com_mun_model_enumeration_Orientation.EAST.__enum__ = com_mun_model_enumeration_Orientation;
var com_mun_model_gates_ComponentKind = function() { };
com_mun_model_gates_ComponentKind.__name__ = true;
var com_mun_model_gates_AND = function() {
};
com_mun_model_gates_AND.__name__ = true;
com_mun_model_gates_AND.__interfaces__ = [com_mun_model_gates_ComponentKind];
com_mun_model_gates_AND.prototype = {
	createPorts: function(xPosition,yPosition,height,width,orientation,inportNum) {
		var portArray = [];
		switch(orientation[1]) {
		case 0:
			var counter = 0;
			while(counter < inportNum) {
				var inport = new com_mun_model_component_Inport(xPosition - width / 2 + width / (inportNum + 1) * (counter + 1),yPosition + height / 2);
				inport.set_sequence(counter + 1);
				inport.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
				portArray.push(inport);
				++counter;
			}
			var outport_ = new com_mun_model_component_Outport(xPosition,yPosition - height / 2);
			outport_.set_portDescription(com_mun_model_enumeration_IOTYPE.OUTPUT);
			portArray.push(outport_);
			break;
		case 1:
			var counter1 = 0;
			while(counter1 < inportNum) {
				var inport1 = new com_mun_model_component_Inport(xPosition - width / 2 + width / (inportNum + 1) * (counter1 + 1),yPosition - height / 2);
				inport1.set_sequence(counter1 + 1);
				inport1.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
				portArray.push(inport1);
				++counter1;
			}
			var outport_1 = new com_mun_model_component_Outport(xPosition,yPosition + height / 2);
			outport_1.set_portDescription(com_mun_model_enumeration_IOTYPE.OUTPUT);
			portArray.push(outport_1);
			break;
		case 2:
			var counter2 = 0;
			while(counter2 < inportNum) {
				var inport2 = new com_mun_model_component_Inport(xPosition + width / 2,height / (inportNum + 1) * (counter2 + 1) + (yPosition - height / 2));
				inport2.set_sequence(counter2 + 1);
				inport2.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
				portArray.push(inport2);
				++counter2;
			}
			var outport_2 = new com_mun_model_component_Outport(xPosition - width / 2,yPosition);
			outport_2.set_portDescription(com_mun_model_enumeration_IOTYPE.OUTPUT);
			portArray.push(outport_2);
			break;
		case 3:
			var counter3 = 0;
			while(counter3 < inportNum) {
				var inport3 = new com_mun_model_component_Inport(xPosition - width / 2,height / (inportNum + 1) * (counter3 + 1) + (yPosition - height / 2));
				inport3.set_sequence(counter3 + 1);
				inport3.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
				portArray.push(inport3);
				++counter3;
			}
			var outport_3 = new com_mun_model_component_Outport(xPosition + width / 2,yPosition);
			outport_3.set_portDescription(com_mun_model_enumeration_IOTYPE.OUTPUT);
			portArray.push(outport_3);
			break;
		}
		return portArray;
	}
};
var com_mun_model_gates_FlipFlop = function() {
};
com_mun_model_gates_FlipFlop.__name__ = true;
com_mun_model_gates_FlipFlop.__interfaces__ = [com_mun_model_gates_ComponentKind];
com_mun_model_gates_FlipFlop.prototype = {
	createPorts: function(xPosition,yPosition,height,width,orientation,inportNum) {
		var portArray = [];
		switch(orientation[1]) {
		case 0:
			var inport_D = new com_mun_model_component_Inport(xPosition - width / 2 + width / 3,yPosition + height / 2);
			inport_D.set_portDescription(com_mun_model_enumeration_IOTYPE.D);
			portArray.push(inport_D);
			var inport_CLK = new com_mun_model_component_Inport(xPosition - width / 2 + width / 3 * 2,yPosition + height / 2);
			inport_CLK.set_portDescription(com_mun_model_enumeration_IOTYPE.CLK);
			portArray.push(inport_CLK);
			var outport_Q = new com_mun_model_component_Outport(xPosition - width / 2 + width / 3,yPosition - height / 2);
			outport_Q.set_portDescription(com_mun_model_enumeration_IOTYPE.Q);
			portArray.push(outport_Q);
			var outport_QN = new com_mun_model_component_Outport(xPosition - width / 2 + width / 3 * 2,yPosition - height / 2);
			outport_QN.set_portDescription(com_mun_model_enumeration_IOTYPE.QN);
			portArray.push(outport_QN);
			break;
		case 1:
			var inport_D1 = new com_mun_model_component_Inport(xPosition - width / 2 + width / 3,yPosition - height / 2);
			inport_D1.set_portDescription(com_mun_model_enumeration_IOTYPE.D);
			portArray.push(inport_D1);
			var inport_CLK1 = new com_mun_model_component_Inport(xPosition - width / 2 + width / 3 * 2,yPosition - height / 2);
			inport_CLK1.set_portDescription(com_mun_model_enumeration_IOTYPE.CLK);
			portArray.push(inport_CLK1);
			var outport_Q1 = new com_mun_model_component_Outport(xPosition - width / 2 + width / 3,yPosition + height / 2);
			outport_Q1.set_portDescription(com_mun_model_enumeration_IOTYPE.Q);
			portArray.push(outport_Q1);
			var outport_QN1 = new com_mun_model_component_Outport(xPosition - width / 2 + width / 3 * 2,yPosition + height / 2);
			outport_QN1.set_portDescription(com_mun_model_enumeration_IOTYPE.QN);
			portArray.push(outport_QN1);
			break;
		case 2:
			var inport_D2 = new com_mun_model_component_Inport(xPosition + width / 2,height / 3 + (yPosition - height / 2));
			inport_D2.set_portDescription(com_mun_model_enumeration_IOTYPE.D);
			portArray.push(inport_D2);
			var inport_CLK2 = new com_mun_model_component_Inport(xPosition + width / 2,height / 3 * 2 + (yPosition - height / 2));
			inport_CLK2.set_portDescription(com_mun_model_enumeration_IOTYPE.CLK);
			portArray.push(inport_CLK2);
			var outport_Q2 = new com_mun_model_component_Outport(xPosition - width / 2,height / 3 + (yPosition - height / 2));
			outport_Q2.set_portDescription(com_mun_model_enumeration_IOTYPE.Q);
			portArray.push(outport_Q2);
			var outport_QN2 = new com_mun_model_component_Outport(xPosition - width / 2,height / 3 * 2 + (yPosition - height / 2));
			outport_QN2.set_portDescription(com_mun_model_enumeration_IOTYPE.QN);
			portArray.push(outport_QN2);
			break;
		case 3:
			var inport_D3 = new com_mun_model_component_Inport(xPosition - width / 2,height / 3 + (yPosition - height / 2));
			inport_D3.set_portDescription(com_mun_model_enumeration_IOTYPE.D);
			portArray.push(inport_D3);
			var inport_CLK3 = new com_mun_model_component_Inport(xPosition - width / 2,height / 3 * 2 + (yPosition - height / 2));
			inport_CLK3.set_portDescription(com_mun_model_enumeration_IOTYPE.CLK);
			portArray.push(inport_CLK3);
			var outport_Q3 = new com_mun_model_component_Outport(xPosition + width / 2,height / 3 + (yPosition - height / 2));
			outport_Q3.set_portDescription(com_mun_model_enumeration_IOTYPE.Q);
			portArray.push(outport_Q3);
			var outport_QN3 = new com_mun_model_component_Outport(xPosition + width / 2,height / 3 * 2 + (yPosition - height / 2));
			outport_QN3.set_portDescription(com_mun_model_enumeration_IOTYPE.QN);
			portArray.push(outport_QN3);
			break;
		}
		return portArray;
	}
};
var com_mun_model_gates_MUX = function() {
};
com_mun_model_gates_MUX.__name__ = true;
com_mun_model_gates_MUX.__interfaces__ = [com_mun_model_gates_ComponentKind];
com_mun_model_gates_MUX.prototype = {
	createPorts: function(xPosition,yPosition,height,width,orientation,inportNum) {
		var portArray = [];
		switch(orientation[1]) {
		case 0:
			var inport_S = new com_mun_model_component_Inport(xPosition + width / 2,yPosition);
			inport_S.set_portDescription(com_mun_model_enumeration_IOTYPE.S);
			portArray.push(inport_S);
			var inport_1 = new com_mun_model_component_Inport(xPosition - width / 2 + height / 3 * 2,yPosition + height / 2);
			inport_1.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
			inport_1.set_sequence(1);
			portArray.push(inport_1);
			var inport_2 = new com_mun_model_component_Inport(xPosition - width / 2 + width / 3,yPosition + height / 2);
			inport_2.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
			inport_2.set_sequence(2);
			portArray.push(inport_2);
			var outport_ = new com_mun_model_component_Outport(xPosition,yPosition - height / 2);
			outport_.set_portDescription(com_mun_model_enumeration_IOTYPE.OUTPUT);
			portArray.push(outport_);
			break;
		case 1:
			var inport_S1 = new com_mun_model_component_Inport(xPosition - width / 2,yPosition);
			inport_S1.set_portDescription(com_mun_model_enumeration_IOTYPE.S);
			portArray.push(inport_S1);
			var inport_11 = new com_mun_model_component_Inport(xPosition - width / 2 + height / 3 * 2,yPosition - height / 2);
			inport_11.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
			inport_11.set_sequence(1);
			portArray.push(inport_11);
			var inport_21 = new com_mun_model_component_Inport(xPosition - width / 2 + width / 3,yPosition - height / 2);
			inport_21.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
			inport_21.set_sequence(2);
			portArray.push(inport_21);
			var outport_1 = new com_mun_model_component_Outport(xPosition,yPosition + height / 2);
			outport_1.set_portDescription(com_mun_model_enumeration_IOTYPE.OUTPUT);
			portArray.push(outport_1);
			break;
		case 2:
			var inport_S2 = new com_mun_model_component_Inport(xPosition,yPosition - height / 2);
			inport_S2.set_portDescription(com_mun_model_enumeration_IOTYPE.S);
			portArray.push(inport_S2);
			var inport_12 = new com_mun_model_component_Inport(xPosition + width / 2,height / 3 + (yPosition - height / 2));
			inport_12.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
			inport_12.set_sequence(1);
			portArray.push(inport_12);
			var inport_22 = new com_mun_model_component_Inport(xPosition + width / 2,height / 3 * 2 + (yPosition - height / 2));
			inport_22.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
			inport_22.set_sequence(2);
			portArray.push(inport_22);
			var outport_2 = new com_mun_model_component_Outport(xPosition - width / 2,yPosition);
			outport_2.set_portDescription(com_mun_model_enumeration_IOTYPE.OUTPUT);
			portArray.push(outport_2);
			break;
		case 3:
			var inport_S3 = new com_mun_model_component_Inport(xPosition,yPosition - height / 2);
			inport_S3.set_portDescription(com_mun_model_enumeration_IOTYPE.S);
			portArray.push(inport_S3);
			var inport_13 = new com_mun_model_component_Inport(xPosition - width / 2,height / 3 + (yPosition - height / 2));
			inport_13.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
			inport_13.set_sequence(1);
			portArray.push(inport_13);
			var inport_23 = new com_mun_model_component_Inport(xPosition - width / 2,height / 3 * 2 + (yPosition - height / 2));
			inport_23.set_portDescription(com_mun_model_enumeration_IOTYPE.INPUT);
			inport_23.set_sequence(2);
			portArray.push(inport_23);
			var outport_3 = new com_mun_model_component_Outport(xPosition + width / 2,yPosition);
			outport_3.set_portDescription(com_mun_model_enumeration_IOTYPE.OUTPUT);
			portArray.push(outport_3);
			break;
		}
		return portArray;
	}
};
var com_mun_view_drawComponents_DrawComponent = function() { };
com_mun_view_drawComponents_DrawComponent.__name__ = true;
var com_mun_view_drawComponents_DrawAND = function(component,drawingAdapter) {
	this.component = component;
	this.drawingAdapter = drawingAdapter;
};
com_mun_view_drawComponents_DrawAND.__name__ = true;
com_mun_view_drawComponents_DrawAND.__interfaces__ = [com_mun_view_drawComponents_DrawComponent];
com_mun_view_drawComponents_DrawAND.prototype = {
	drawCorrespondingComponent: function() {
		this.drawingAdapter.drawAndShape(this.component.get_xPosition(),this.component.get_yPosition(),this.component.get_width(),this.component.get_height(),this.component.get_orientation());
		var inportArray = this.component.get_inportArray();
		var _g1 = 0;
		var _g = inportArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			var port = inportArray[i];
			this.drawingAdapter.setFillColor("black");
			this.drawingAdapter.drawCricle(port.get_xPosition(),port.get_yPosition(),2);
		}
		var outportArray = this.component.get_outportArray();
		var _g11 = 0;
		var _g2 = outportArray.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var port1 = outportArray[i1];
			this.drawingAdapter.setFillColor("black");
			this.drawingAdapter.drawCricle(port1.get_xPosition(),port1.get_yPosition(),2);
		}
		this.drawingAdapter.resetDrawingParam();
	}
};
var com_mun_view_drawComponents_DrawFlipFlop = function(component,drawingAdapter) {
	this.component = component;
	this.drawingAdapter = drawingAdapter;
};
com_mun_view_drawComponents_DrawFlipFlop.__name__ = true;
com_mun_view_drawComponents_DrawFlipFlop.__interfaces__ = [com_mun_view_drawComponents_DrawComponent];
com_mun_view_drawComponents_DrawFlipFlop.prototype = {
	drawCorrespondingComponent: function() {
		this.drawingAdapter.drawRect(this.component.get_xPosition(),this.component.get_yPosition(),this.component.get_width(),this.component.get_height());
		this.drawingAdapter.drawText("FF",this.component.get_xPosition() - 4,this.component.get_yPosition(),this.component.get_width());
		var inportArray = this.component.get_inportArray();
		var _g1 = 0;
		var _g = inportArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			var port = inportArray[i];
			this.drawingAdapter.setFillColor("black");
			this.drawingAdapter.drawCricle(port.get_xPosition(),port.get_yPosition(),2);
			var _g2 = this.component.get_orientation();
			switch(_g2[1]) {
			case 0:
				if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.D) {
					this.drawingAdapter.drawText("D",port.get_xPosition() - 2,port.get_yPosition() - 5,this.component.get_width() - 2);
				} else if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.CLK) {
					this.drawingAdapter.drawText("CLK",port.get_xPosition() - 6,port.get_yPosition() - 5,this.component.get_width() - 2);
				}
				break;
			case 1:
				if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.D) {
					this.drawingAdapter.drawText("D",port.get_xPosition() - 3,port.get_yPosition() + 10,this.component.get_width() - 2);
				} else if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.CLK) {
					this.drawingAdapter.drawText("CLK",port.get_xPosition() - 3,port.get_yPosition() + 10,this.component.get_width() - 2);
				}
				break;
			case 2:
				if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.D) {
					this.drawingAdapter.drawText("D",port.get_xPosition() - 10,port.get_yPosition() + 2,this.component.get_width() - 2);
				} else if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.CLK) {
					this.drawingAdapter.drawText("CLK",port.get_xPosition() - 20,port.get_yPosition() + 2,this.component.get_width() - 2);
				}
				break;
			case 3:
				if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.D) {
					this.drawingAdapter.drawText("D",port.get_xPosition() + 3,port.get_yPosition() + 3,this.component.get_width() - 2);
				} else if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.CLK) {
					this.drawingAdapter.drawText("CLK",port.get_xPosition() + 3,port.get_yPosition() + 3,this.component.get_width() - 2);
				}
				break;
			}
		}
		var outportArray = this.component.get_outportArray();
		var _g11 = 0;
		var _g3 = outportArray.length;
		while(_g11 < _g3) {
			var i1 = _g11++;
			var port1 = outportArray[i1];
			this.drawingAdapter.setFillColor("black");
			this.drawingAdapter.drawCricle(port1.get_xPosition(),port1.get_yPosition(),2);
			var _g21 = this.component.get_orientation();
			switch(_g21[1]) {
			case 0:
				if(port1.get_portDescription() == com_mun_model_enumeration_IOTYPE.Q) {
					this.drawingAdapter.drawText("Q",port1.get_xPosition() - 2,port1.get_yPosition() + 10,this.component.get_width() - 2);
				} else if(port1.get_portDescription() == com_mun_model_enumeration_IOTYPE.QN) {
					this.drawingAdapter.drawText("QN",port1.get_xPosition() - 6,port1.get_yPosition() + 10,this.component.get_width() - 2);
				}
				break;
			case 1:
				if(port1.get_portDescription() == com_mun_model_enumeration_IOTYPE.Q) {
					this.drawingAdapter.drawText("Q",port1.get_xPosition() - 3,port1.get_yPosition() - 7,this.component.get_width() - 2);
				} else if(port1.get_portDescription() == com_mun_model_enumeration_IOTYPE.QN) {
					this.drawingAdapter.drawText("QN",port1.get_xPosition() - 3,port1.get_yPosition() - 7,this.component.get_width() - 2);
				}
				break;
			case 2:
				if(port1.get_portDescription() == com_mun_model_enumeration_IOTYPE.Q) {
					this.drawingAdapter.drawText("Q",port1.get_xPosition() + 3,port1.get_yPosition() + 2,this.component.get_width() - 2);
				} else if(port1.get_portDescription() == com_mun_model_enumeration_IOTYPE.QN) {
					this.drawingAdapter.drawText("QN",port1.get_xPosition() + 3,port1.get_yPosition() + 2,this.component.get_width() - 2);
				}
				break;
			case 3:
				if(port1.get_portDescription() == com_mun_model_enumeration_IOTYPE.Q) {
					this.drawingAdapter.drawText("Q",port1.get_xPosition() - 10,port1.get_yPosition() + 3,this.component.get_width() - 2);
				} else if(port1.get_portDescription() == com_mun_model_enumeration_IOTYPE.QN) {
					this.drawingAdapter.drawText("QN",port1.get_xPosition() - 14,port1.get_yPosition() + 3,this.component.get_width() - 2);
				}
				break;
			}
		}
		this.drawingAdapter.resetDrawingParam();
	}
};
var com_mun_view_drawComponents_DrawMUX = function(component,drawingAdapter) {
	this.component = component;
	this.drawingAdapter = drawingAdapter;
};
com_mun_view_drawComponents_DrawMUX.__name__ = true;
com_mun_view_drawComponents_DrawMUX.__interfaces__ = [com_mun_view_drawComponents_DrawComponent];
com_mun_view_drawComponents_DrawMUX.prototype = {
	drawCorrespondingComponent: function() {
		this.drawingAdapter.drawRect(this.component.get_xPosition(),this.component.get_yPosition(),this.component.get_width(),this.component.get_height());
		this.drawingAdapter.setTextColor("black");
		this.drawingAdapter.drawText("MUX",this.component.get_xPosition() - 8,this.component.get_yPosition(),this.component.get_width() - 2);
		var inportArray = this.component.get_inportArray();
		var _g1 = 0;
		var _g = inportArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			var port = inportArray[i];
			this.drawingAdapter.setFillColor("black");
			this.drawingAdapter.drawCricle(port.get_xPosition(),port.get_yPosition(),2);
			this.drawingAdapter.setTextColor("black");
			var _g2 = this.component.get_orientation();
			switch(_g2[1]) {
			case 0:
				if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.S) {
					this.drawingAdapter.drawText("S",port.get_xPosition() - 7,port.get_yPosition() + 2,this.component.get_width() - 4);
				} else {
					this.drawingAdapter.drawText(port.get_sequence() + "",port.get_xPosition() - 2,port.get_yPosition() - 5,this.component.get_width() - 4);
				}
				break;
			case 1:
				if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.S) {
					this.drawingAdapter.drawText("S",port.get_xPosition() + 3,port.get_yPosition(),this.component.get_width() - 4);
				} else {
					this.drawingAdapter.drawText(port.get_sequence() + "",port.get_xPosition(),port.get_yPosition() + 10,this.component.get_width() - 4);
				}
				break;
			case 2:
				if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.S) {
					this.drawingAdapter.drawText("S",port.get_xPosition() - 2,port.get_yPosition() + 10,this.component.get_width() - 4);
				} else {
					this.drawingAdapter.drawText(port.get_sequence() + "",port.get_xPosition() - 8,port.get_yPosition(),this.component.get_width() - 4);
				}
				break;
			case 3:
				if(port.get_portDescription() == com_mun_model_enumeration_IOTYPE.S) {
					this.drawingAdapter.drawText("S",port.get_xPosition() - 2,port.get_yPosition() + 10,this.component.get_width() - 4);
				} else {
					this.drawingAdapter.drawText(port.get_sequence() + "",port.get_xPosition() + 3,port.get_yPosition() + 2,this.component.get_width() - 4);
				}
				break;
			}
		}
		var outportArray = this.component.get_outportArray();
		var _g11 = 0;
		var _g3 = outportArray.length;
		while(_g11 < _g3) {
			var i1 = _g11++;
			var port1 = outportArray[i1];
			this.drawingAdapter.setFillColor("black");
			this.drawingAdapter.drawCricle(port1.get_xPosition(),port1.get_yPosition(),2);
		}
		this.drawingAdapter.resetDrawingParam();
	}
};
var com_mun_view_drawingImpl_Box = function(x_position,y_position,width,height,orientation,worldToView) {
	var x0 = worldToView.convertX(x_position - width / 2);
	var y0 = worldToView.convertY(y_position - height / 2);
	var x1 = worldToView.invertX(x_position + width / 2);
	var y1 = worldToView.invertY(y_position + height / 2);
	switch(orientation[1]) {
	case 0:
		this.xb = x0;
		this.yb = y0;
		this.xc = x1;
		this.yc = y0;
		this.xd = x1;
		this.yd = y1;
		this.xa = x0;
		this.ya = y1;
		break;
	case 1:
		this.xd = x0;
		this.yd = y0;
		this.xa = x1;
		this.ya = y0;
		this.xb = x1;
		this.yb = y1;
		this.xc = x0;
		this.yc = y1;
		break;
	case 2:
		this.xc = x0;
		this.yc = y0;
		this.xd = x1;
		this.yd = y0;
		this.xa = x1;
		this.ya = y1;
		this.xb = x0;
		this.yb = y1;
		break;
	case 3:
		this.xa = x0;
		this.ya = y0;
		this.xb = x1;
		this.yb = y0;
		this.xc = x1;
		this.yc = y1;
		this.xd = x0;
		this.yd = y1;
		break;
	}
};
com_mun_view_drawingImpl_Box.__name__ = true;
com_mun_view_drawingImpl_Box.prototype = {
	get_xa: function() {
		return this.xa;
	}
	,get_ya: function() {
		return this.ya;
	}
	,get_xb: function() {
		return this.xb;
	}
	,get_yb: function() {
		return this.yb;
	}
	,get_xc: function() {
		return this.xc;
	}
	,get_yc: function() {
		return this.yc;
	}
	,get_xd: function() {
		return this.xd;
	}
	,get_yd: function() {
		return this.yd;
	}
};
var com_mun_view_drawingImpl_DrawingAdapter = function(cxt) {
	this.font = "8px serif";
	this.lineWidth = 1.0;
	this.textColor = "black";
	this.fillColor = "gray";
	this.strokeColor = "black";
	this.cxt = cxt;
	this.worldToView = new com_mun_view_drawingImpl_WorldToView(1);
};
com_mun_view_drawingImpl_DrawingAdapter.__name__ = true;
com_mun_view_drawingImpl_DrawingAdapter.__interfaces__ = [com_mun_model_drawingInterface_DrawingAdapterI];
com_mun_view_drawingImpl_DrawingAdapter.prototype = {
	resetDrawingParam: function() {
		this.strokeColor = "black";
		this.fillColor = "gray";
		this.textColor = "black";
		this.lineWidth = 1.0;
		this.font = "8px serif";
	}
	,setFillColor: function(color) {
		this.fillColor = color;
	}
	,setTextColor: function(color) {
		this.textColor = color;
	}
	,drawAndShape: function(x,y,width,height,orientation) {
		var r = new com_mun_view_drawingImpl_Box(x,y,width,height,orientation,this.worldToView);
		this.cxt.beginPath();
		this.cxt.moveTo(r.get_xa(),r.get_ya());
		this.cxt.lineTo((r.get_xa() + r.get_xb()) / 2,(r.get_ya() + r.get_yb()) / 2);
		this.cxt.lineTo((r.get_xc() + r.get_xd()) / 2,(r.get_yc() + r.get_yd()) / 2);
		this.cxt.lineTo(r.get_xd(),r.get_yd());
		this.cxt.closePath();
		var cxmin = Math.min(Math.min(r.get_xa(),r.get_xb()),Math.min(r.get_xc(),r.get_xd()));
		var cymin = Math.min(Math.min(r.get_ya(),r.get_yb()),Math.min(r.get_yc(),r.get_yd()));
		var cxmax = Math.max(Math.max(r.get_xa(),r.get_xb()),Math.max(r.get_xc(),r.get_xd()));
		var cymax = Math.max(Math.max(r.get_ya(),r.get_yb()),Math.max(r.get_yc(),r.get_yd()));
		switch(orientation[1]) {
		case 0:
			this.cxt.ellipse(x,y,(cxmax - cxmin) / 2,(cymax - cymin) / 2,180 * Math.PI / 180,0,Math.PI);
			break;
		case 1:
			this.cxt.ellipse(x,y,(cxmax - cxmin) / 2,(cymax - cymin) / 2,0 * Math.PI / 180,0,Math.PI);
			break;
		case 2:
			this.cxt.ellipse(x,y,(cxmax - cxmin) / 2,(cymax - cymin) / 2,90 * Math.PI / 180,0,Math.PI);
			break;
		case 3:
			this.cxt.ellipse(x,y,(cxmax - cxmin) / 2,(cymax - cymin) / 2,270 * Math.PI / 180,0,Math.PI);
			break;
		}
		this.cxt.closePath();
		this.cxt.fillStyle = this.fillColor;
		this.cxt.fill();
		this.cxt.stroke();
	}
	,drawRect: function(x,y,width,height) {
		var x0 = this.worldToView.convertX(x - width / 2);
		var y0 = this.worldToView.convertY(y - height / 2);
		var x1 = this.worldToView.convertX(x + width / 2);
		var y1 = this.worldToView.convertY(y + height / 2);
		this.cxt.rect(Math.min(x0,x1),Math.min(y0,y1),Math.abs(x1 - x0),Math.abs(y1 - y0));
		this.cxt.fillStyle = this.fillColor;
		this.cxt.fill();
		this.cxt.stroke();
	}
	,drawText: function(str,x,y,width) {
		this.cxt.font = this.font;
		this.cxt.fillStyle = this.textColor;
		this.cxt.fillText(str,x,y,width);
	}
	,drawCricle: function(x,y,radius) {
		var x0 = this.worldToView.convertX(x);
		var y0 = this.worldToView.convertY(y);
		var x1 = this.worldToView.convertX(x);
		var y1 = this.worldToView.convertY(y);
		this.cxt.beginPath();
		this.cxt.arc(Math.min(x0,x1),Math.min(y0,y1),radius,0,2 * Math.PI,false);
		this.cxt.fillStyle = this.fillColor;
		this.cxt.fill();
		this.cxt.stroke();
	}
};
var com_mun_view_drawingImpl_WorldToViewI = function() { };
com_mun_view_drawingImpl_WorldToViewI.__name__ = true;
var com_mun_view_drawingImpl_WorldToView = function(base) {
	this.base = 1;
	this.base = base;
};
com_mun_view_drawingImpl_WorldToView.__name__ = true;
com_mun_view_drawingImpl_WorldToView.__interfaces__ = [com_mun_view_drawingImpl_WorldToViewI];
com_mun_view_drawingImpl_WorldToView.prototype = {
	convertX: function(x) {
		return this.base * x;
	}
	,convertY: function(y) {
		return this.base * y;
	}
	,invertX: function(view_x) {
		return this.base * view_x;
	}
	,invertY: function(view_y) {
		return this.base * view_y;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
String.__name__ = true;
Array.__name__ = true;
Test.main();
})();
