// Generated by Haxe 3.4.0
(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
Math.__name__ = true;
var Test = function() { };
Test.__name__ = true;
Test.main = function() {
	console.log("Hello World!");
	var button = window.document.createElement("button");
	button.textContent = "Click Me";
	button.onclick = function(event) {
		js_Browser.alert("Haxe is great");
	};
	window.document.body.appendChild(button);
	Test.canvas = window.document.getElementById("canvas");
	console.log(Test.canvas);
	Test.cxt = Test.canvas.getContext("2d");
	var drawingAdapter = new com_mun_haxe_drawingImpl_DrawingAdapter(Test.cxt);
	drawingAdapter.drawAndShape(60,50,40,40,com_mun_haxe_enumeration_Orientation.SOUTH);
	drawingAdapter.drawAndShape(110,50,40,40,com_mun_haxe_enumeration_Orientation.WEST);
	drawingAdapter.drawAndShape(160,50,40,40,com_mun_haxe_enumeration_Orientation.EAST);
	drawingAdapter.drawAndShape(210,50,40,40,com_mun_haxe_enumeration_Orientation.NORTH);
	drawingAdapter.drawOrShape(60,100,40,40,com_mun_haxe_enumeration_Orientation.SOUTH);
	drawingAdapter.drawOrShape(110,100,40,40,com_mun_haxe_enumeration_Orientation.WEST);
	drawingAdapter.drawOrShape(160,100,40,40,com_mun_haxe_enumeration_Orientation.EAST);
	drawingAdapter.drawOrShape(210,100,40,40,com_mun_haxe_enumeration_Orientation.NORTH);
	drawingAdapter.drawBufferShape(60,150,40,40,com_mun_haxe_enumeration_Orientation.SOUTH);
	drawingAdapter.drawBufferShape(110,150,40,40,com_mun_haxe_enumeration_Orientation.WEST);
	drawingAdapter.drawBufferShape(160,150,40,40,com_mun_haxe_enumeration_Orientation.EAST);
	drawingAdapter.drawBufferShape(210,150,40,40,com_mun_haxe_enumeration_Orientation.NORTH);
	drawingAdapter.drawNotShape(60,200,40,40,com_mun_haxe_enumeration_Orientation.SOUTH);
	drawingAdapter.drawNotShape(110,200,40,40,com_mun_haxe_enumeration_Orientation.WEST);
	drawingAdapter.drawNotShape(160,200,40,40,com_mun_haxe_enumeration_Orientation.EAST);
	drawingAdapter.drawNotShape(210,200,40,40,com_mun_haxe_enumeration_Orientation.NORTH);
	drawingAdapter.drawRect(60,250,40,40);
	drawingAdapter.drawRect(110,250,40,40);
	drawingAdapter.drawRect(160,250,40,40);
	drawingAdapter.drawRect(210,250,40,40);
	drawingAdapter.drawCricle(60,300,10);
	drawingAdapter.drawCricle(110,300,10);
	drawingAdapter.drawCricle(160,300,10);
	drawingAdapter.drawCricle(210,300,10);
	drawingAdapter.drawLine(60,350,80,350);
	drawingAdapter.drawLine(110,350,130,350);
	drawingAdapter.drawLine(160,350,190,350);
	drawingAdapter.drawLine(210,350,240,350);
	drawingAdapter.setTextColor("red");
	drawingAdapter.drawText("1234",60,400,80);
};
var com_mun_haxe_drawingImpl_Box = function(x_position,y_position,width,height,orientation,worldToView) {
	var x0 = worldToView.convertX(x_position - width / 2);
	var y0 = worldToView.convertY(y_position - height / 2);
	var x1 = worldToView.invertX(x_position + width / 2);
	var y1 = worldToView.invertY(y_position + height / 2);
	switch(orientation[1]) {
	case 0:
		this.xb = x0;
		this.yb = y0;
		this.xc = x1;
		this.yc = y0;
		this.xd = x1;
		this.yd = y1;
		this.xa = x0;
		this.ya = y1;
		break;
	case 1:
		this.xd = x0;
		this.yd = y0;
		this.xa = x1;
		this.ya = y0;
		this.xb = x1;
		this.yb = y1;
		this.xc = x0;
		this.yc = y1;
		break;
	case 2:
		this.xc = x0;
		this.yc = y0;
		this.xd = x1;
		this.yd = y0;
		this.xa = x1;
		this.ya = y1;
		this.xb = x0;
		this.yb = y1;
		break;
	case 3:
		this.xa = x0;
		this.ya = y0;
		this.xb = x1;
		this.yb = y0;
		this.xc = x1;
		this.yc = y1;
		this.xd = x0;
		this.yd = y1;
		break;
	}
};
com_mun_haxe_drawingImpl_Box.__name__ = true;
com_mun_haxe_drawingImpl_Box.prototype = {
	get_xa: function() {
		return this.xa;
	}
	,get_ya: function() {
		return this.ya;
	}
	,get_xb: function() {
		return this.xb;
	}
	,get_yb: function() {
		return this.yb;
	}
	,get_xc: function() {
		return this.xc;
	}
	,get_yc: function() {
		return this.yc;
	}
	,get_xd: function() {
		return this.xd;
	}
	,get_yd: function() {
		return this.yd;
	}
};
var com_mun_haxe_drawingInterface_DrawingAdapterI = function() { };
com_mun_haxe_drawingInterface_DrawingAdapterI.__name__ = true;
var com_mun_haxe_drawingImpl_DrawingAdapter = function(cxt) {
	this.font = "15px serif";
	this.lineWidth = 1.0;
	this.textColor = "black";
	this.fillColor = "gray";
	this.cxt = cxt;
	this.worldToView = new com_mun_haxe_drawingImpl_WorldToView(1);
};
com_mun_haxe_drawingImpl_DrawingAdapter.__name__ = true;
com_mun_haxe_drawingImpl_DrawingAdapter.__interfaces__ = [com_mun_haxe_drawingInterface_DrawingAdapterI];
com_mun_haxe_drawingImpl_DrawingAdapter.prototype = {
	setFillColor: function(color) {
		this.fillColor = color;
	}
	,setTextColor: function(color) {
		this.textColor = color;
	}
	,drawAndShape: function(x,y,width,height,orientation) {
		var r = new com_mun_haxe_drawingImpl_Box(x,y,width,height,orientation,this.worldToView);
		this.cxt.beginPath();
		this.cxt.moveTo(r.get_xa(),r.get_ya());
		this.cxt.lineTo((r.get_xa() + r.get_xb()) / 2,(r.get_ya() + r.get_yb()) / 2);
		this.cxt.lineTo((r.get_xc() + r.get_xd()) / 2,(r.get_yc() + r.get_yd()) / 2);
		this.cxt.lineTo(r.get_xd(),r.get_yd());
		this.cxt.closePath();
		var cxmin = Math.min(Math.min(r.get_xa(),r.get_xb()),Math.min(r.get_xc(),r.get_xd()));
		var cymin = Math.min(Math.min(r.get_ya(),r.get_yb()),Math.min(r.get_yc(),r.get_yd()));
		var cxmax = Math.max(Math.max(r.get_xa(),r.get_xb()),Math.max(r.get_xc(),r.get_xd()));
		var cymax = Math.max(Math.max(r.get_ya(),r.get_yb()),Math.max(r.get_yc(),r.get_yd()));
		switch(orientation[1]) {
		case 0:
			this.cxt.ellipse(x,y,(cxmax - cxmin) / 2,(cymax - cymin) / 1.5,180 * Math.PI / 180,0,Math.PI);
			break;
		case 1:
			this.cxt.ellipse(x,y,(cxmax - cxmin) / 2,(cymax - cymin) / 1.5,0 * Math.PI / 180,0,Math.PI);
			break;
		case 2:
			this.cxt.ellipse(x,y,(cxmax - cxmin) / 2,(cymax - cymin) / 1.5,90 * Math.PI / 180,0,Math.PI);
			break;
		case 3:
			this.cxt.ellipse(x,y,(cxmax - cxmin) / 2,(cymax - cymin) / 1.5,270 * Math.PI / 180,0,Math.PI);
			break;
		}
		this.cxt.closePath();
		this.cxt.fillStyle = this.fillColor;
		this.setFillColor("gray");
		this.cxt.fill();
	}
	,drawOrShape: function(x,y,width,height,orientation) {
		var r = new com_mun_haxe_drawingImpl_Box(x,y,width,height,orientation,this.worldToView);
		this.cxt.beginPath();
		this.cxt.moveTo(r.get_xa(),r.get_ya());
		this.cxt.quadraticCurveTo((r.get_xa() + r.get_xb()) / 2,(r.get_ya() + r.get_yb()) / 2,(r.get_xb() + r.get_xc()) / 2,(r.get_yb() + r.get_yc()) / 2);
		this.cxt.quadraticCurveTo((r.get_xc() + r.get_xd()) / 2,(r.get_yc() + r.get_yd()) / 2,r.get_xd(),r.get_yd());
		this.cxt.quadraticCurveTo(0.25 * (r.get_xa() + r.get_xb() + r.get_xc() + r.get_xd()),0.25 * (r.get_ya() + r.get_yb() + r.get_yc() + r.get_yd()),r.get_xa(),r.get_ya());
		this.cxt.closePath();
		this.cxt.fillStyle = this.fillColor;
		this.cxt.fill();
	}
	,drawBufferShape: function(x,y,width,height,orientation) {
		var r = new com_mun_haxe_drawingImpl_Box(x,y,width,height,orientation,this.worldToView);
		this.cxt.beginPath();
		this.cxt.moveTo(r.get_xa(),r.get_ya());
		this.cxt.lineTo((r.get_xb() + r.get_xc()) / 2,(r.get_yb() + r.get_yc()) / 2);
		this.cxt.lineTo(r.get_xd(),r.get_yd());
		this.cxt.fillStyle = this.fillColor;
		this.cxt.closePath();
		this.cxt.fill();
	}
	,drawNotShape: function(x,y,width,height,orientation) {
		var r = new com_mun_haxe_drawingImpl_Box(x,y,width,height,orientation,this.worldToView);
		this.cxt.beginPath();
		this.cxt.moveTo(r.get_xa(),r.get_ya());
		this.cxt.lineTo((r.get_xb() + r.get_xc()) / 2,(r.get_yb() + r.get_yc()) / 2);
		this.cxt.lineTo(r.get_xd(),r.get_yd());
		this.cxt.closePath();
		var circleCentreX = (r.get_xb() + r.get_xc()) / 2;
		var circleCentreY = (r.get_yb() + r.get_yc()) / 2;
		var radius = Math.sqrt((r.get_xb() - r.get_xc()) * (r.get_xb() - r.get_xc()) + (r.get_yb() - r.get_yc()) * (r.get_yb() - r.get_yc())) / 10;
		console.log("radius = " + radius + " x = " + circleCentreX + " y = " + circleCentreY);
		switch(orientation[1]) {
		case 0:
			this.cxt.arc(circleCentreX,circleCentreY + radius / 2,radius,0,2 * Math.PI,false);
			break;
		case 1:
			this.cxt.arc(circleCentreX,circleCentreY - radius / 2,radius,0,2 * Math.PI,false);
			break;
		case 2:
			this.cxt.arc(circleCentreX + radius / 2,circleCentreY,radius,0,2 * Math.PI,false);
			break;
		case 3:
			this.cxt.arc(circleCentreX - radius / 2,circleCentreY,radius,0,2 * Math.PI,false);
			break;
		}
		this.cxt.fillStyle = this.fillColor;
		this.cxt.fill();
	}
	,drawRect: function(x,y,width,height) {
		var x0 = this.worldToView.convertX(x - width / 2);
		var y0 = this.worldToView.convertY(y - height / 2);
		var x1 = this.worldToView.convertX(x + width / 2);
		var y1 = this.worldToView.convertY(y + height / 2);
		this.cxt.beginPath();
		this.cxt.fillRect(Math.min(x0,x1),Math.min(y0,y1),Math.abs(x1 - x0),Math.abs(y1 - y0));
		this.cxt.closePath();
		this.cxt.fillStyle = this.fillColor;
		this.cxt.fill();
	}
	,drawText: function(str,x,y,width) {
		this.cxt.font = this.font;
		this.cxt.fillStyle = this.textColor;
		this.cxt.fillText(str,x,y,width);
	}
	,drawCricle: function(x,y,radius) {
		var x0 = this.worldToView.convertX(x - radius);
		var y0 = this.worldToView.convertY(y - radius);
		var x1 = this.worldToView.convertX(x + radius);
		var y1 = this.worldToView.convertY(y + radius);
		this.cxt.beginPath();
		this.cxt.arc(Math.min(x0,x1),Math.min(y0,y1),radius,0,2 * Math.PI,false);
		this.cxt.fillStyle = this.fillColor;
		this.cxt.fill();
	}
	,drawLine: function(vx0,vy0,vx1,vy1) {
		var x0 = this.worldToView.convertX(vx0);
		var y0 = this.worldToView.convertY(vy0);
		var x1 = this.worldToView.convertX(vx1);
		var y1 = this.worldToView.convertY(vy1);
		console.log(x0 + "  " + y0 + "  " + x1 + "  " + y1);
		this.cxt.beginPath();
		this.cxt.moveTo(x0,y0);
		this.cxt.lineTo(x1,y1);
		this.cxt.closePath();
		this.cxt.lineWidth = this.lineWidth;
		this.cxt.fillStyle = this.fillColor;
		this.cxt.fill();
	}
};
var com_mun_haxe_drawingInterface_WorldToViewI = function() { };
com_mun_haxe_drawingInterface_WorldToViewI.__name__ = true;
var com_mun_haxe_drawingImpl_WorldToView = function(base) {
	this.base = 1;
	this.base = base;
};
com_mun_haxe_drawingImpl_WorldToView.__name__ = true;
com_mun_haxe_drawingImpl_WorldToView.__interfaces__ = [com_mun_haxe_drawingInterface_WorldToViewI];
com_mun_haxe_drawingImpl_WorldToView.prototype = {
	convertX: function(x) {
		return this.base * x;
	}
	,convertY: function(y) {
		return this.base * y;
	}
	,invertX: function(view_x) {
		return this.base * view_x;
	}
	,invertY: function(view_y) {
		return this.base * view_y;
	}
};
var com_mun_haxe_enumeration_Orientation = { __ename__ : true, __constructs__ : ["NORTH","SOUTH","WEST","EAST"] };
com_mun_haxe_enumeration_Orientation.NORTH = ["NORTH",0];
com_mun_haxe_enumeration_Orientation.NORTH.toString = $estr;
com_mun_haxe_enumeration_Orientation.NORTH.__enum__ = com_mun_haxe_enumeration_Orientation;
com_mun_haxe_enumeration_Orientation.SOUTH = ["SOUTH",1];
com_mun_haxe_enumeration_Orientation.SOUTH.toString = $estr;
com_mun_haxe_enumeration_Orientation.SOUTH.__enum__ = com_mun_haxe_enumeration_Orientation;
com_mun_haxe_enumeration_Orientation.WEST = ["WEST",2];
com_mun_haxe_enumeration_Orientation.WEST.toString = $estr;
com_mun_haxe_enumeration_Orientation.WEST.__enum__ = com_mun_haxe_enumeration_Orientation;
com_mun_haxe_enumeration_Orientation.EAST = ["EAST",3];
com_mun_haxe_enumeration_Orientation.EAST.toString = $estr;
com_mun_haxe_enumeration_Orientation.EAST.__enum__ = com_mun_haxe_enumeration_Orientation;
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
String.__name__ = true;
Array.__name__ = true;
Test.main();
})();
