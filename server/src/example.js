// Generated by Haxe 3.4.3
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HaxeLowDisk = function() { };
$hxClasses["HaxeLowDisk"] = HaxeLowDisk;
HaxeLowDisk.__name__ = ["HaxeLowDisk"];
HaxeLowDisk.prototype = {
	readFileSync: null
	,writeFile: null
	,__class__: HaxeLowDisk
};
var NodeJsDisk = function() {
	this.steno = require("steno");
	try {
		this.fs = require("graceful-fs");
	} catch( e ) {
		this.fs = require("steno/node_modules/graceful-fs");
	}
	if(this.steno == null) {
		throw new js__$Boot_HaxeError("Node.js error: package 'steno' not found. Please install with 'npm install --save steno'");
	}
};
$hxClasses["NodeJsDisk"] = NodeJsDisk;
NodeJsDisk.__name__ = ["NodeJsDisk"];
NodeJsDisk.__interfaces__ = [HaxeLowDisk];
NodeJsDisk.prototype = {
	steno: null
	,fs: null
	,readFileSync: function(file) {
		if(this.fs.existsSync(file)) {
			return this.fs.readFileSync(file,{ encoding : "utf8"});
		} else {
			return null;
		}
	}
	,writeFile: function(file,data) {
		this.steno.writeFile(file,data,function(err) {
			if(err) {
				throw new js__$Boot_HaxeError(err);
			}
		});
	}
	,__class__: NodeJsDisk
};
var NodeJsDiskSync = function() {
	this.steno = require("steno");
	this.fs = require("graceful-fs");
	if(this.steno == null) {
		throw new js__$Boot_HaxeError("Node.js error: package 'steno' not found. Please install with 'npm install --save steno'");
	}
};
$hxClasses["NodeJsDiskSync"] = NodeJsDiskSync;
NodeJsDiskSync.__name__ = ["NodeJsDiskSync"];
NodeJsDiskSync.__interfaces__ = [HaxeLowDisk];
NodeJsDiskSync.prototype = {
	steno: null
	,fs: null
	,readFileSync: function(file) {
		if(this.fs.existsSync(file)) {
			return this.fs.readFileSync(file,{ encoding : "utf8"});
		} else {
			return null;
		}
	}
	,writeFile: function(file,data) {
		this.steno.writeFileSync(file,data);
	}
	,__class__: NodeJsDiskSync
};
var SysDisk = function() {
};
$hxClasses["SysDisk"] = SysDisk;
SysDisk.__name__ = ["SysDisk"];
SysDisk.__interfaces__ = [HaxeLowDisk];
SysDisk.prototype = {
	readFileSync: function(file) {
		if(sys_FileSystem.exists(file)) {
			return js_node_Fs.readFileSync(file,{ encoding : "utf8"});
		} else {
			return null;
		}
	}
	,writeFile: function(file,data) {
		js_node_Fs.writeFileSync(file,data);
	}
	,__class__: SysDisk
};
var HaxeLow = function(file,disk) {
	this.file = file;
	this.disk = disk;
	this.db = { };
	if(disk == null && file != null) {
		this.disk = new NodeJsDisk();
	}
	if(this.file != null) {
		if(this.disk == null) {
			throw new js__$Boot_HaxeError("HaxeLow: no disk storage set.");
		}
		this.checksum = this.disk.readFileSync(this.file);
		if(this.checksum != null) {
			this.restore(this.checksum);
		}
	}
};
$hxClasses["HaxeLow"] = HaxeLow;
HaxeLow.__name__ = ["HaxeLow"];
HaxeLow.uuid = function() {
	var uid_b = "";
	var a = 8;
	uid_b += Std.string(StringTools.hex(new Date().getTime() | 0,8));
	while(a++ < 36) uid_b += Std.string((a * 51 & 52) != 0 ? StringTools.hex((a ^ 15) != 0 ? 8 ^ (Math.random() * ((a ^ 20) != 0 ? 16 : 4) | 0) : 4) : "-");
	return uid_b.toLowerCase();
};
HaxeLow.prototype = {
	file: null
	,db: null
	,checksum: null
	,disk: null
	,backup: function(file) {
		var backup = tjson_TJSON.encode(this.db,"fancy");
		if(file != null) {
			this.disk.writeFile(file,backup);
		}
		return backup;
	}
	,restore: function(s) {
		try {
			this.db = tjson_TJSON.parse(s);
			this.checksum = null;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			throw new js__$Boot_HaxeError("HaxeLow: JSON parsing failed: file \"" + this.file + "\" is corrupt. " + Std.string(e));
		}
		return this;
	}
	,save: function() {
		if(this.file == null) {
			return this;
		}
		var data = this.backup();
		if(data == this.checksum) {
			return this;
		}
		this.checksum = data;
		this.disk.writeFile(this.file,data);
		return this;
	}
	,col: function(cls) {
		var name = Type.getClassName(cls);
		if(!Object.prototype.hasOwnProperty.call(this.db,name)) {
			this.db[name] = [];
			this.save();
		}
		return Reflect.field(this.db,name);
	}
	,keyCol: function(cls,keyField,keyType) {
		var this1 = this.col(cls);
		if(keyField != null) {
			this1["__haxeLowId"] = keyField;
		}
		return this1;
	}
	,idCol: function(cls,keyType) {
		return this.keyCol(cls,"id",keyType);
	}
	,_idCol: function(cls,keyType) {
		return this.keyCol(cls,"_id",keyType);
	}
	,__class__: HaxeLow
};
var _$HaxeLowCol_HaxeLowCol_$Impl_$ = {};
$hxClasses["_HaxeLowCol.HaxeLowCol_Impl_"] = _$HaxeLowCol_HaxeLowCol_$Impl_$;
_$HaxeLowCol_HaxeLowCol_$Impl_$.__name__ = ["_HaxeLowCol","HaxeLowCol_Impl_"];
_$HaxeLowCol_HaxeLowCol_$Impl_$._new = function(array,keyField) {
	var this1 = array;
	if(keyField != null) {
		this1["__haxeLowId"] = keyField;
	}
	return this1;
};
_$HaxeLowCol_HaxeLowCol_$Impl_$.idGet = function(this1,id) {
	return Lambda.find(this1,function(o) {
		return Reflect.field(o,Reflect.field(this1,"__haxeLowId")) == id;
	});
};
_$HaxeLowCol_HaxeLowCol_$Impl_$.idInsert = function(this1,obj) {
	if(_$HaxeLowCol_HaxeLowCol_$Impl_$.idGet(this1,Reflect.field(obj,Reflect.field(this1,"__haxeLowId"))) == null) {
		this1.push(obj);
		return true;
	}
	return false;
};
_$HaxeLowCol_HaxeLowCol_$Impl_$.idUpdate = function(this1,id,props) {
	var exists = _$HaxeLowCol_HaxeLowCol_$Impl_$.idGet(this1,id);
	if(exists == null) {
		return null;
	}
	var _g = 0;
	var _g1 = Type.getInstanceFields(exists == null ? null : js_Boot.getClass(exists));
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(Object.prototype.hasOwnProperty.call(props,field)) {
			Reflect.setProperty(exists,field,Reflect.field(props,field));
		}
	}
	return exists;
};
_$HaxeLowCol_HaxeLowCol_$Impl_$.idReplace = function(this1,obj) {
	var exists = _$HaxeLowCol_HaxeLowCol_$Impl_$.idGet(this1,Reflect.field(obj,Reflect.field(this1,"__haxeLowId")));
	if(exists != null) {
		if(exists == obj) {
			return false;
		}
		HxOverrides.remove(this1,exists);
	}
	this1.push(obj);
	return exists != null;
};
_$HaxeLowCol_HaxeLowCol_$Impl_$.idRemove = function(this1,id) {
	var exists = _$HaxeLowCol_HaxeLowCol_$Impl_$.idGet(this1,id);
	if(exists == null) {
		return null;
	}
	HxOverrides.remove(this1,exists);
	return exists;
};
_$HaxeLowCol_HaxeLowCol_$Impl_$.keyValue = function(this1,obj) {
	return Reflect.field(obj,Reflect.field(this1,"__haxeLowId"));
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.exists = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.find = function(it,f) {
	var v = $iterator(it)();
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var Main = function() {
	var app = new js_npm_Express();
	var mongo = new org_mongodb_Mongo("localhost",3000);
	var mailTransport = js_npm_Nodemailer.createTransport({ service : "Gmail", auth : { user : "web.circuitdiagram@gmail.com", pass : "Webapplication"}});
	app.set("port",3000);
	var tmp = js_node_Path.join(__dirname.substring(0,__dirname.indexOf("server\\src")));
	app["use"](new js_npm_express_Static(tmp));
	var tmp1 = js_npm_express_BodyParser.json();
	app["use"](tmp1);
	var jsonParser = js_npm_express_BodyParser.json();
	console.log(__dirname.substring(0,__dirname.indexOf("server\\src")) + "client\\src");
	app.get("/",function(req,res) {
		res.sendfile(__dirname + "/login.html");
	});
	app.post("/",jsonParser,function(req1,res1) {
		var _req = req1;
		var db = new HaxeLow("db.json");
		var user = db.col(User);
		var flag = false;
		var _g = 0;
		while(_g < user.length) {
			var i = user[_g];
			++_g;
			flag = i.check(_req.body.username,_req.body.password);
			if(flag == true) {
				break;
			}
		}
		if(flag == true) {
			console.log("login");
			res1.send("y");
		} else {
			console.log("login fail");
			res1.send("n");
		}
	});
	app.get("/regist",function(req2,res2) {
		res2.sendfile(__dirname + "/regist.html");
	});
	app.post("/regist",jsonParser,function(req3,res3) {
		var _req1 = req3;
		var db1 = new HaxeLow("db.json");
		var user1 = db1.col(User);
		var emailflag = true;
		var usernameflag = true;
		var _g1 = 0;
		while(_g1 < user1.length) {
			var i1 = user1[_g1];
			++_g1;
			if(i1.getname() == _req1.body.username) {
				usernameflag = false;
			}
			if(i1.getmail() == _req1.body.email) {
				emailflag = false;
			}
		}
		if(emailflag == true && usernameflag == true) {
			user1.push(_req1.body);
			db1.save();
			console.log("t");
			res3.send("t");
		} else {
			if(usernameflag == false) {
				console.log("username");
				res3.send("username");
			}
			if(emailflag == false) {
				console.log("email");
				res3.send("email");
			}
		}
	});
	app.get("/app/users",jsonParser,function(req4,res4,next) {
		var _req2 = req4;
		var username = req4.param("username");
		console.log(username);
		res4.sendfile(__dirname.substring(0,__dirname.indexOf("server\\src")) + "\\client\\app.html");
	});
	app.get("/forgot",function(req5,res5) {
		res5.sendfile(__dirname + "/forgot.html");
	});
	app.post("/forgot/users",jsonParser,function(req6,res6,next1) {
		var _req3 = req6;
		var username1 = req6.param("username");
		var db2 = new HaxeLow("db.json");
		var user2 = db2.col(User);
		var flag1 = false;
		var temp = "";
		var pass = "";
		var _g2 = 0;
		while(_g2 < user2.length) {
			var i2 = user2[_g2];
			++_g2;
			if(i2.getname() == username1) {
				flag1 = true;
				temp = i2.getmail();
				pass = i2.getpassword();
			}
		}
		if(flag1 == true) {
			var options = { from : "web.circuitdiagram@hotmail.com", to : temp, subject : "From web application", text : "From web application", html : "<h1>Hello, your password is:  " + pass + "！</h1>", attachments : []};
			mailTransport.sendMail(options,function(err,msg) {
				if(err) {
					console.log(err);
				} else {
					console.log("email sent to user: " + Std.string(username1));
				}
			});
			res6.send("y");
		} else {
			res6.send("n");
		}
	});
	app.get("/changepassword",function(req7,res7) {
		res7.sendfile(__dirname + "/changepassword.html");
	});
	app.post("/changepassword/users",jsonParser,function(req8,res8,next2) {
		var _req4 = req8;
		var username2 = req8.param("username");
		var db3 = new HaxeLow("db.json");
		var user3 = db3.col(User);
		var flag2 = true;
		var _g3 = 0;
		while(_g3 < user3.length) {
			var i3 = user3[_g3];
			++_g3;
			if(i3.getname() == username2) {
				flag2 = i3.changepass(_req4.body.oldp,_req4.body.newp);
				break;
			}
		}
		if(flag2 == true) {
			db3.save();
			res8.send("y");
		} else {
			res8.send("n");
		}
	});
	app["use"](function(req9,res9,next3) {
		res9.status(404).send("404");
	});
	var tmp2 = app.get("port");
	app.listen(tmp2,function() {
		console.log("Express server listening on port " + Std.string(app.get("port")));
	});
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	var main = new Main();
};
Main.prototype = {
	server: null
	,__class__: Main
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var User = function(u,p,e) {
	this.username = u;
	this.password = p;
	this.email = e;
};
$hxClasses["User"] = User;
User.__name__ = ["User"];
User.prototype = {
	username: null
	,password: null
	,email: null
	,getname: function() {
		return this.username;
	}
	,getmail: function() {
		return this.email;
	}
	,check: function(name,pass) {
		if(name == this.username && pass == this.password) {
			return true;
		} else {
			return false;
		}
	}
	,getpassword: function() {
		return this.password;
	}
	,changepass: function(oldp,newp) {
		if(this.password == oldp) {
			this.password = newp;
			return true;
		} else {
			return false;
		}
	}
	,__class__: User
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.prototype = {
	__b: null
	,__class__: haxe_Utf8
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = ["haxe","crypto","Md5"];
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g1 = 0;
	var _g = blksSize;
	while(_g1 < _g) {
		var i = _g1++;
		blks[i] = 0;
	}
	var i1 = 0;
	var max = str1.length;
	var l = max * 8;
	while(i1 < max) {
		blks[i1 >> 2] |= str1.b[i1] << (l + i1) % 4 * 8;
		++i1;
	}
	blks[i1 >> 2] |= 128 << (l + i1) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_StringMap = function() { };
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var i = _g1++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g11 = 0;
		var _g2 = this.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var c = this.b[i1];
			s_b += String.fromCharCode(chars[c >> 4]);
			s_b += String.fromCharCode(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	b: null
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = ["haxe","io","Output"];
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,flush: function() {
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeDouble: function(x) {
		var i64 = haxe_io_FPHelper.doubleToI64(x);
		if(this.bigEndian) {
			this.writeInt32(i64.high);
			this.writeInt32(i64.low);
		} else {
			this.writeInt32(i64.low);
			this.writeInt32(i64.high);
		}
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeUInt24: function(x) {
		if(x < 0 || x >= 16777216) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 16);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s) {
		var b = haxe_io_Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		var _this = this.b;
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this.b;
		var b2 = buf.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.b.push(last);
		}
		return buf.getBytes().toString();
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_npm_Express = require("express");
var js_npm_Nodemailer = require("nodemailer");
var js_npm_express_BodyParser = require("body-parser");
var js_npm_express__$Route_Route_$Impl_$ = {};
$hxClasses["js.npm.express._Route.Route_Impl_"] = js_npm_express__$Route_Route_$Impl_$;
js_npm_express__$Route_Route_$Impl_$.__name__ = ["js","npm","express","_Route","Route_Impl_"];
js_npm_express__$Route_Route_$Impl_$.fromEReg = function(e) {
	return e.r;
};
var js_npm_express_Static = require("express").static;
var org_bsonspec_BSON = function() { };
$hxClasses["org.bsonspec.BSON"] = org_bsonspec_BSON;
org_bsonspec_BSON.__name__ = ["org","bsonspec","BSON"];
org_bsonspec_BSON.encode = function(o) {
	return new org_bsonspec_BSONEncoder(o).getBytes();
};
org_bsonspec_BSON.decode = function(i) {
	return new org_bsonspec_BSONDecoder(i).getObject();
};
var org_bsonspec_BSONDecoder = function(input) {
	var length = input.readInt32();
	this.object = this.readObject(input,length - 4);
};
$hxClasses["org.bsonspec.BSONDecoder"] = org_bsonspec_BSONDecoder;
org_bsonspec_BSONDecoder.__name__ = ["org","bsonspec","BSONDecoder"];
org_bsonspec_BSONDecoder.prototype = {
	getObject: function() {
		return this.object;
	}
	,readInt32: function(input) {
		return input.readInt32();
	}
	,readField: function(type,input) {
		var value = null;
		var key = input.readUntil(0);
		var bytes = key.length + 1;
		switch(type) {
		case 1:
			value = input.readDouble();
			bytes += 8;
			break;
		case 3:
			var len = input.readInt32();
			value = this.readObject(input,len - 4);
			bytes += len;
			break;
		case 4:
			var len1 = input.readInt32();
			value = this.readArray(input,len1 - 4);
			bytes += len1;
			break;
		case 5:
			var len2 = input.readInt32();
			var subtype = input.readByte();
			value = input.read(len2);
			bytes += len2 + 5;
			break;
		case 6:
			throw new js__$Boot_HaxeError("Deprecated: 0x06 undefined");
			break;
		case 7:
			value = new org_bsonspec_ObjectID(input);
			bytes += 12;
			break;
		case 8:
			if(input.readByte() == 1) {
				value = true;
			} else {
				value = false;
			}
			++bytes;
			break;
		case 9:
			var t = this.readUInt64(input);
			value = new Date(t);
			bytes += 8;
			break;
		case 10:
			value = null;
			break;
		case 11:
			var pattern = input.readUntil(0);
			bytes += pattern.length + 1;
			value = input.readUntil(0);
			bytes += value.length + 1;
			break;
		case 12:
			throw new js__$Boot_HaxeError("Deprecated: 0x0C DBPointer");
			break;
		case 2:case 13:
			var len3 = input.readInt32();
			bytes += len3 + 4;
			value = input.readString(len3);
			if(value.length > 0 && value.charCodeAt(value.length - 1) == 0) {
				value = value.substr(0,value.length - 1);
			}
			break;
		case 14:
			throw new js__$Boot_HaxeError("Deprecated: 0x0E Symbol");
			break;
		case 15:
			throw new js__$Boot_HaxeError("Unimplemented: code w/ scope");
			break;
		case 16:
			value = input.readInt32();
			bytes += 4;
			break;
		case 17:
			var low = input.readInt32();
			var high = input.readInt32();
			var this1 = new haxe__$Int64__$_$_$Int64(high,low);
			value = this1;
			bytes += 8;
			break;
		case 18:
			var low1 = input.readInt32();
			var high1 = input.readInt32();
			var this2 = new haxe__$Int64__$_$_$Int64(high1,low1);
			value = this2;
			value = value.high * 4294967296.0 + (value.low > 0 ? value.low : 4294967296.0 + value.low);
			bytes += 8;
			break;
		case 127:
			value = "MAX";
			break;
		case 255:
			value = "MIN";
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown type " + type);
		}
		return { key : key, value : value, length : bytes};
	}
	,readObject: function(input,length) {
		var object = { };
		while(length > 0) {
			var type = input.readByte();
			--length;
			if(type == 0) {
				return object;
			}
			var field = this.readField(type,input);
			object[field.key] = field.value;
			length -= field.length;
		}
		input.readByte();
		return object;
	}
	,readArray: function(input,length) {
		var array = [];
		while(length > 0) {
			var type = input.readByte();
			--length;
			if(type == 0) {
				return array;
			}
			var field = this.readField(type,input);
			array.splice(Std.parseInt(field.key),0,field.value);
			length -= field.length;
		}
		input.readByte();
		return array;
	}
	,readInt64: function(input) {
		var low = input.readInt32();
		var high = input.readInt32();
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	,object: null
	,readUInt32: function(input) {
		return input.readUInt16() + input.readUInt16() * 65536.0;
	}
	,readUInt64: function(input) {
		return this.readUInt32(input) + this.readUInt32(input) * 4294967296.0;
	}
	,__class__: org_bsonspec_BSONDecoder
};
var org_bsonspec_BSONDocument = function() {
	this._nodes = new List();
};
$hxClasses["org.bsonspec.BSONDocument"] = org_bsonspec_BSONDocument;
org_bsonspec_BSONDocument.__name__ = ["org","bsonspec","BSONDocument"];
org_bsonspec_BSONDocument.create = function() {
	return new org_bsonspec_BSONDocument();
};
org_bsonspec_BSONDocument.prototype = {
	_nodes: null
	,append: function(key,value) {
		this._nodes.add(new org_bsonspec_BSONDocumentNode(key,value));
		return this;
	}
	,nodes: function() {
		return new _$List_ListIterator(this._nodes.h);
	}
	,toString: function() {
		var iterator = new _$List_ListIterator(this._nodes.h);
		var s_b = "";
		s_b += "{";
		var node = iterator;
		while(node.hasNext()) {
			var node1 = node.next();
			s_b += Std.string(" " + node1.key + " : " + Std.string(node1.data));
			if(iterator.hasNext()) {
				s_b += ",";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: org_bsonspec_BSONDocument
};
var org_bsonspec_BSONDocumentNode = function(k,d) {
	this.key = k;
	this.data = d;
};
$hxClasses["org.bsonspec.BSONDocumentNode"] = org_bsonspec_BSONDocumentNode;
org_bsonspec_BSONDocumentNode.__name__ = ["org","bsonspec","BSONDocumentNode"];
org_bsonspec_BSONDocumentNode.prototype = {
	key: null
	,data: null
	,__class__: org_bsonspec_BSONDocumentNode
};
var org_bsonspec_BSONEncoder = function(o) {
	if(!js_Boot.__instanceof(o,org_bsonspec_BSONDocument) && Type["typeof"](o) != ValueType.TObject) {
		throw new js__$Boot_HaxeError("Cannot convert a non-object to BSON");
	}
	var out = new haxe_io_BytesOutput();
	this.bytes = this.objectToBytes(o);
	out.writeInt32(this.bytes.length + 4);
	out.writeBytes(this.bytes,0,this.bytes.length);
	this.bytes = out.getBytes();
};
$hxClasses["org.bsonspec.BSONEncoder"] = org_bsonspec_BSONEncoder;
org_bsonspec_BSONEncoder.__name__ = ["org","bsonspec","BSONEncoder"];
org_bsonspec_BSONEncoder.prototype = {
	getBytes: function() {
		return this.bytes;
	}
	,convertToBytes: function(key,value) {
		var out = new haxe_io_BytesOutput();
		var bytes;
		if(value == null) {
			out.writeByte(10);
			out.writeString(key);
			out.writeByte(0);
		} else if(typeof(value) == "boolean") {
			out.writeByte(8);
			out.writeString(key);
			out.writeByte(0);
			if(value == true) {
				out.writeByte(1);
			} else {
				out.writeByte(0);
			}
		} else if(typeof(value) == "string") {
			out.writeByte(2);
			out.writeString(key);
			out.writeByte(0);
			var str = value;
			out.writeInt32(str.length + 1);
			out.writeString(str);
			out.writeByte(0);
		} else if(Type["typeof"](value) == ValueType.TInt) {
			out.writeByte(16);
			out.writeString(key);
			out.writeByte(0);
			out.writeInt32(value);
		} else if(Type["typeof"](value) == ValueType.TFloat) {
			out.writeByte(1);
			out.writeString(key);
			out.writeByte(0);
			out.writeDouble(value);
		} else if(js_Boot.__instanceof(value,haxe__$Int64__$_$_$Int64)) {
			out.writeByte(18);
			out.writeString(key);
			out.writeByte(0);
			out.writeInt32(value.high);
			out.writeInt32(value.low);
		} else if(js_Boot.__instanceof(value,Date)) {
			out.writeByte(9);
			out.writeString(key);
			out.writeByte(0);
			this.writeUInt64(out,value.getTime());
		} else if((value instanceof Array) && value.__enum__ == null) {
			out.writeByte(4);
			out.writeString(key);
			out.writeByte(0);
			bytes = this.arrayToBytes(value);
			out.writeInt32(bytes.length + 4);
			out.writeBytes(bytes,0,bytes.length);
		} else if(js_Boot.__instanceof(value,org_bsonspec_ObjectID)) {
			out.writeByte(7);
			out.writeString(key);
			out.writeByte(0);
			out.writeBytes(value.bytes,0,12);
		} else if(js_Boot.__instanceof(value,org_bsonspec_BSONDocument)) {
			out.writeByte(3);
			out.writeString(key);
			out.writeByte(0);
			bytes = this.documentToBytes(value);
			out.writeInt32(bytes.length + 4);
			out.writeBytes(bytes,0,bytes.length);
		} else if(js_Boot.__instanceof(value,Dynamic)) {
			out.writeByte(3);
			out.writeString(key);
			out.writeByte(0);
			bytes = this.objectToBytes(value);
			out.writeInt32(bytes.length + 4);
			out.writeBytes(bytes,0,bytes.length);
		} else {
			console.log("could not encode " + Std.string(value));
		}
		return out.getBytes();
	}
	,writeString: function(out,str) {
		out.writeInt32(str.length + 1);
		out.writeString(str);
		out.writeByte(0);
	}
	,writeHeader: function(out,key,type) {
		out.writeByte(type);
		out.writeString(key);
		out.writeByte(0);
	}
	,arrayToBytes: function(a) {
		var out = new haxe_io_BytesOutput();
		var bytes;
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes = this.convertToBytes(i == null ? "null" : "" + i,a[i]);
			out.writeBytes(bytes,0,bytes.length);
		}
		out.writeByte(0);
		return out.getBytes();
	}
	,objectToBytes: function(o) {
		if(js_Boot.__instanceof(o,org_bsonspec_BSONDocument)) {
			return this.documentToBytes(o);
		} else {
			return this.dynamicToBytes(o);
		}
	}
	,documentToBytes: function(o) {
		var out = new haxe_io_BytesOutput();
		var bytes;
		var node = o.nodes();
		while(node.hasNext()) {
			var node1 = node.next();
			bytes = this.convertToBytes(node1.key,node1.data);
			out.writeBytes(bytes,0,bytes.length);
		}
		out.writeByte(0);
		return out.getBytes();
	}
	,dynamicToBytes: function(o) {
		var out = new haxe_io_BytesOutput();
		var bytes;
		var _g = 0;
		var _g1 = Reflect.fields(o);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var value = Reflect.field(o,key);
			if(!Reflect.isFunction(value)) {
				bytes = this.convertToBytes(key,value);
				out.writeBytes(bytes,0,bytes.length);
			}
		}
		out.writeByte(0);
		return out.getBytes();
	}
	,bytes: null
	,writeUInt32: function(out,n) {
		var a = n / 65536.0 | 0;
		var b = Math.round(n - a * 65536.0);
		out.writeUInt16(b);
		out.writeUInt16(a);
	}
	,writeUInt64: function(out,n) {
		var a = Math.floor(n / 4294967296.0);
		var b = n - a * 4294967296.0;
		this.writeUInt32(out,b);
		this.writeUInt32(out,a);
	}
	,__class__: org_bsonspec_BSONEncoder
};
var org_bsonspec_ObjectID = function(input) {
	if(input == null) {
		var out = new haxe_io_BytesOutput();
		out.writeInt32(Math.floor(new Date().getTime() / 1000));
		out.writeBytes(org_bsonspec_ObjectID.machine,0,3);
		out.writeUInt16(org_bsonspec_ObjectID.pid);
		out.writeUInt24(org_bsonspec_ObjectID.sequence++);
		if(org_bsonspec_ObjectID.sequence > 16777215) {
			org_bsonspec_ObjectID.sequence = 0;
		}
		this.bytes = out.getBytes();
	} else {
		this.bytes = input.read(12);
	}
};
$hxClasses["org.bsonspec.ObjectID"] = org_bsonspec_ObjectID;
org_bsonspec_ObjectID.__name__ = ["org","bsonspec","ObjectID"];
org_bsonspec_ObjectID.fromString = function(s) {
	var r = new org_bsonspec_ObjectID();
	var i = 0;
	while(i < s.length) {
		var _this = r.bytes;
		var v = Std.parseInt("0x" + HxOverrides.substr(s,i,2));
		_this.b[i >> 1] = v & 255;
		i += 2;
	}
	return r;
};
org_bsonspec_ObjectID.prototype = {
	bytes: null
	,toString: function() {
		return "ObjectID(\"" + this.bytes.toHex() + "\")";
	}
	,__class__: org_bsonspec_ObjectID
};
var org_mongodb_Collection = function(protocol,name,db) {
	this.protocol = protocol;
	this.name = name;
	this.fullname = db.name + "." + name;
	this.db = db;
};
$hxClasses["org.mongodb.Collection"] = org_mongodb_Collection;
org_mongodb_Collection.__name__ = ["org","mongodb","Collection"];
org_mongodb_Collection.prototype = {
	protocol: null
	,fullname: null
	,name: null
	,db: null
	,find: function(query,returnFields,skip,number,flags) {
		if(flags == null) {
			flags = 0;
		}
		if(number == null) {
			number = 0;
		}
		if(skip == null) {
			skip = 0;
		}
		var _this = this.protocol;
		var collection = this.fullname;
		var query1 = query;
		var out = new haxe_io_BytesOutput();
		out.writeInt32(flags);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(skip);
		out.writeInt32(number);
		if(query1 == null) {
			query1 = { };
		}
		var d = new org_bsonspec_BSONEncoder(query1).getBytes();
		out.writeBytes(d,0,d.length);
		if(returnFields != null) {
			var d1 = new org_bsonspec_BSONEncoder(returnFields).getBytes();
			out.writeBytes(d1,0,d1.length);
		}
		var data = out.getBytes();
		if(_this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this.socket.output.writeBytes(bytes,0,bytes.length);
		_this.socket.output.flush();
		_this.requestId++;
		return new org_mongodb_Cursor(this.protocol,this.fullname);
	}
	,findOne: function(query,returnFields) {
		var _this = this.protocol;
		var collection = this.fullname;
		var query1 = query;
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query1 == null) {
			query1 = { };
		}
		var d = new org_bsonspec_BSONEncoder(query1).getBytes();
		out.writeBytes(d,0,d.length);
		if(returnFields != null) {
			var d1 = new org_bsonspec_BSONEncoder(returnFields).getBytes();
			out.writeBytes(d1,0,d1.length);
		}
		var data = out.getBytes();
		if(_this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this.socket.output.writeBytes(bytes,0,bytes.length);
		_this.socket.output.flush();
		_this.requestId++;
		var details = this.protocol.read();
		if(details.numReturned == 1) {
			return new org_bsonspec_BSONDecoder(details.input).getObject();
		} else {
			return null;
		}
	}
	,insert: function(fields) {
		this.protocol.insert(this.fullname,fields);
	}
	,update: function(select,fields,upsert,multi) {
		var flags = 0 | (upsert ? 1 : 0) | (multi ? 2 : 0);
		var _this = this.protocol;
		var collection = this.fullname;
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(flags);
		var d = new org_bsonspec_BSONEncoder(select).getBytes();
		out.writeBytes(d,0,d.length);
		var d1 = new org_bsonspec_BSONEncoder(fields).getBytes();
		out.writeBytes(d1,0,d1.length);
		var data = out.getBytes();
		if(_this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2001);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this.socket.output.writeBytes(bytes,0,bytes.length);
		_this.socket.output.flush();
		_this.requestId++;
	}
	,remove: function(select) {
		var _this = this.protocol;
		var collection = this.fullname;
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		var d = new org_bsonspec_BSONEncoder(select != null ? select : { }).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2006);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this.socket.output.writeBytes(bytes,0,bytes.length);
		_this.socket.output.flush();
		_this.requestId++;
	}
	,create: function() {
		var _this = this.db;
		var collection = this.name;
		var _this1 = _this.cmd;
		var _this2 = _this1.protocol;
		var collection1 = _this1.fullname;
		var query = { create : collection};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection1);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this2.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this2.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this2.socket.output.writeBytes(bytes,0,bytes.length);
		_this2.socket.output.flush();
		_this2.requestId++;
		var details = _this1.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
		new org_mongodb_Collection(_this.protocol,collection,_this);
	}
	,drop: function() {
		var _this = this.db.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { drop : this.name};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
	}
	,rename: function(to) {
		var _this = this.db.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { renameCollection : this.name, to : to};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
	}
	,getIndexes: function() {
		var _this = this.protocol;
		var collection = this.db.name + ".system.indexes";
		var query = { ns : this.fullname};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(0);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this.socket.output.writeBytes(bytes,0,bytes.length);
		_this.socket.output.flush();
		_this.requestId++;
		return new org_mongodb_Cursor(this.protocol,this.fullname);
	}
	,ensureIndex: function(keyPattern,options) {
		var nameList = new List();
		var _g = 0;
		var _g1 = Reflect.fields(keyPattern);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			nameList.add(field + "_" + Std.string(Reflect.field(keyPattern,field)));
		}
		var name = nameList.join("_");
		if(options == null) {
			options = { name : name, ns : this.fullname, key : keyPattern};
		} else {
			options["name"] = name;
			options["ns"] = this.fullname;
			options["key"] = keyPattern;
		}
		this.protocol.insert(this.db.name + ".system.indexes",options);
	}
	,dropIndexes: function() {
		var _this = this.db.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { dropIndexes : this.name, index : "*"};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
	}
	,dropIndex: function(nameOrPattern) {
		var _this = this.db.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { dropIndexes : this.name, index : nameOrPattern};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
	}
	,reIndex: function() {
		var _this = this.db.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { reIndex : this.name};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
	}
	,count: function() {
		var _this = this.db.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { count : this.name};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		var result = details.numReturned == 1 ? new org_bsonspec_BSONDecoder(details.input).getObject() : null;
		return result.n;
	}
	,distinct: function(key,query) {
		var cmd = org_bsonspec_BSONDocument.create();
		cmd.append("distinct",this.name);
		cmd.append("key",key);
		if(query != null) {
			cmd.append("query",query);
		}
		var _this = this.db.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query1 = cmd;
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query1 == null) {
			query1 = { };
		}
		var d = new org_bsonspec_BSONEncoder(query1).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		var result = details.numReturned == 1 ? new org_bsonspec_BSONDecoder(details.input).getObject() : null;
		return result.values;
	}
	,__class__: org_mongodb_Collection
};
var org_mongodb_Cursor = function(protocol,collection) {
	this.protocol = protocol;
	this.collection = collection;
	this.finished = false;
	this.documents = [];
	var documents = this.documents;
	var details = this.protocol.read();
	var _g1 = 0;
	var _g = details.numReturned;
	while(_g1 < _g) {
		var i = _g1++;
		documents.push(new org_bsonspec_BSONDecoder(details.input).getObject());
	}
	this.cursorId = details.cursorId;
	if(this.documents.length == 0) {
		this.finished = true;
		var a = this.cursorId;
		var b = null;
		if(a.high != b.high || a.low != b.low) {
			var _this = this.protocol;
			var cursors = [this.cursorId];
			var out = new haxe_io_BytesOutput();
			out.writeInt32(0);
			out.writeInt32(cursors.length);
			var _g2 = 0;
			while(_g2 < cursors.length) {
				var cursor = cursors[_g2];
				++_g2;
				out.writeInt32(cursor.high);
				out.writeInt32(cursor.low);
			}
			var data = out.getBytes();
			if(_this.socket == null) {
				throw new js__$Boot_HaxeError("Not connected");
			}
			var out1 = new haxe_io_BytesOutput();
			out1.writeInt32(data.length + 16);
			out1.writeInt32(_this.requestId);
			out1.writeInt32(0);
			out1.writeInt32(2007);
			out1.writeBytes(data,0,data.length);
			var bytes = out1.getBytes();
			_this.socket.output.writeBytes(bytes,0,bytes.length);
			_this.socket.output.flush();
			_this.requestId++;
		}
	}
};
$hxClasses["org.mongodb.Cursor"] = org_mongodb_Cursor;
org_mongodb_Cursor.__name__ = ["org","mongodb","Cursor"];
org_mongodb_Cursor.prototype = {
	protocol: null
	,collection: null
	,cursorId: null
	,documents: null
	,finished: null
	,checkResponse: function() {
		var documents = this.documents;
		var details = this.protocol.read();
		var _g1 = 0;
		var _g = details.numReturned;
		while(_g1 < _g) {
			var i = _g1++;
			documents.push(new org_bsonspec_BSONDecoder(details.input).getObject());
		}
		this.cursorId = details.cursorId;
		if(this.documents.length == 0) {
			this.finished = true;
			var a = this.cursorId;
			var b = null;
			if(a.high != b.high || a.low != b.low) {
				var _this = this.protocol;
				var cursors = [this.cursorId];
				var out = new haxe_io_BytesOutput();
				out.writeInt32(0);
				out.writeInt32(cursors.length);
				var _g2 = 0;
				while(_g2 < cursors.length) {
					var cursor = cursors[_g2];
					++_g2;
					out.writeInt32(cursor.high);
					out.writeInt32(cursor.low);
				}
				var data = out.getBytes();
				if(_this.socket == null) {
					throw new js__$Boot_HaxeError("Not connected");
				}
				var out1 = new haxe_io_BytesOutput();
				out1.writeInt32(data.length + 16);
				out1.writeInt32(_this.requestId);
				out1.writeInt32(0);
				out1.writeInt32(2007);
				out1.writeBytes(data,0,data.length);
				var bytes = out1.getBytes();
				_this.socket.output.writeBytes(bytes,0,bytes.length);
				_this.socket.output.flush();
				_this.requestId++;
			}
			return false;
		} else {
			return true;
		}
	}
	,hasNext: function() {
		if(this.finished) {
			return false;
		}
		if(this.documents.length > 0) {
			return true;
		} else {
			var _this = this.protocol;
			var collection = this.collection;
			var cursorId = this.cursorId;
			var out = new haxe_io_BytesOutput();
			out.writeInt32(0);
			out.writeString(collection);
			out.writeByte(0);
			out.writeInt32(0);
			out.writeInt32(cursorId.high);
			out.writeInt32(cursorId.low);
			var data = out.getBytes();
			if(_this.socket == null) {
				throw new js__$Boot_HaxeError("Not connected");
			}
			var out1 = new haxe_io_BytesOutput();
			out1.writeInt32(data.length + 16);
			out1.writeInt32(_this.requestId);
			out1.writeInt32(0);
			out1.writeInt32(2005);
			out1.writeBytes(data,0,data.length);
			var bytes = out1.getBytes();
			_this.socket.output.writeBytes(bytes,0,bytes.length);
			_this.socket.output.flush();
			_this.requestId++;
			var documents = this.documents;
			var details = this.protocol.read();
			var _g1 = 0;
			var _g = details.numReturned;
			while(_g1 < _g) {
				var i = _g1++;
				documents.push(new org_bsonspec_BSONDecoder(details.input).getObject());
			}
			this.cursorId = details.cursorId;
			var tmp;
			if(this.documents.length == 0) {
				this.finished = true;
				var a = this.cursorId;
				var b = null;
				if(a.high != b.high || a.low != b.low) {
					var _this1 = this.protocol;
					var cursors = [this.cursorId];
					var out2 = new haxe_io_BytesOutput();
					out2.writeInt32(0);
					out2.writeInt32(cursors.length);
					var _g2 = 0;
					while(_g2 < cursors.length) {
						var cursor = cursors[_g2];
						++_g2;
						out2.writeInt32(cursor.high);
						out2.writeInt32(cursor.low);
					}
					var data1 = out2.getBytes();
					if(_this1.socket == null) {
						throw new js__$Boot_HaxeError("Not connected");
					}
					var out3 = new haxe_io_BytesOutput();
					out3.writeInt32(data1.length + 16);
					out3.writeInt32(_this1.requestId);
					out3.writeInt32(0);
					out3.writeInt32(2007);
					out3.writeBytes(data1,0,data1.length);
					var bytes1 = out3.getBytes();
					_this1.socket.output.writeBytes(bytes1,0,bytes1.length);
					_this1.socket.output.flush();
					_this1.requestId++;
				}
				tmp = false;
			} else {
				tmp = true;
			}
			if(tmp) {
				return true;
			}
		}
		return false;
	}
	,next: function() {
		return this.documents.shift();
	}
	,__class__: org_mongodb_Cursor
};
var org_mongodb_Database = function(protocol,name) {
	this.protocol = protocol;
	this.name = name;
	this.cmd = new org_mongodb_Collection(protocol,"$cmd",this);
};
$hxClasses["org.mongodb.Database"] = org_mongodb_Database;
org_mongodb_Database.__name__ = ["org","mongodb","Database"];
org_mongodb_Database.prototype = {
	protocol: null
	,cmd: null
	,name: null
	,getCollection: function(name) {
		return new org_mongodb_Collection(this.protocol,name,this);
	}
	,resolve: function(name) {
		return new org_mongodb_Collection(this.protocol,name,this);
	}
	,listCollections: function() {
		var _this = new org_mongodb_Collection(this.protocol,"system.namespaces",this);
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { options : { "$exists" : 1}};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(0);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var collections = new org_mongodb_Cursor(_this.protocol,_this.fullname);
		var names = [];
		var collection1 = collections;
		while(collection1.hasNext()) {
			var collection2 = collection1.next();
			var name = collection2.name;
			names.push(HxOverrides.substr(name,this.name.length + 1,null));
		}
		return names;
	}
	,addUser: function(username,password) {
		var users = new org_mongodb_Collection(this.protocol,"system.users",this);
		var _this = users.protocol;
		var collection = users.fullname;
		var query = { user : username};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this.socket.output.writeBytes(bytes,0,bytes.length);
		_this.socket.output.flush();
		_this.requestId++;
		var details = users.protocol.read();
		var user = details.numReturned == 1 ? new org_bsonspec_BSONDecoder(details.input).getObject() : null;
		if(user == null) {
			user = { user : username, pwd : ""};
		}
		user.pwd = haxe_crypto_Md5.encode(username + ":mongo:" + password);
		users.protocol.insert(users.fullname,user);
	}
	,login: function(username,password) {
		var _this = this.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { getnonce : 1};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		var n = details.numReturned == 1 ? new org_bsonspec_BSONDecoder(details.input).getObject() : null;
		if(n == null) {
			return false;
		}
		var command = org_bsonspec_BSONDocument.create().append("authenticate",1).append("user",username).append("nonce",n.nonce).append("key",haxe_crypto_Md5.encode(n.nonce + username + haxe_crypto_Md5.encode(username + ":mongo:" + password)));
		var _this2 = this.cmd;
		var _this3 = _this2.protocol;
		var collection1 = _this2.fullname;
		var query1 = command;
		var out2 = new haxe_io_BytesOutput();
		out2.writeInt32(0);
		out2.writeString(collection1);
		out2.writeByte(0);
		out2.writeInt32(0);
		out2.writeInt32(-1);
		if(query1 == null) {
			query1 = { };
		}
		var d1 = new org_bsonspec_BSONEncoder(query1).getBytes();
		out2.writeBytes(d1,0,d1.length);
		var data1 = out2.getBytes();
		if(_this3.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out3 = new haxe_io_BytesOutput();
		out3.writeInt32(data1.length + 16);
		out3.writeInt32(_this3.requestId);
		out3.writeInt32(0);
		out3.writeInt32(2004);
		out3.writeBytes(data1,0,data1.length);
		var bytes1 = out3.getBytes();
		_this3.socket.output.writeBytes(bytes1,0,bytes1.length);
		_this3.socket.output.flush();
		_this3.requestId++;
		var details1 = _this2.protocol.read();
		var a = details1.numReturned == 1 ? new org_bsonspec_BSONDecoder(details1.input).getObject() : null;
		return (a.ok | 0) == 1;
	}
	,logout: function() {
		var _this = this.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { logout : 1};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
	}
	,createCollection: function(collection) {
		var _this = this.cmd;
		var _this1 = _this.protocol;
		var collection1 = _this.fullname;
		var query = { create : collection};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection1);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
		return new org_mongodb_Collection(this.protocol,collection,this);
	}
	,dropCollection: function(collection) {
		var _this = this.cmd;
		var _this1 = _this.protocol;
		var collection1 = _this.fullname;
		var query = { drop : collection};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection1);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
	}
	,renameCollection: function(from,to) {
		var _this = this.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { renameCollection : from, to : to};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
	}
	,drop: function() {
		var _this = this.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { dropDatabase : 1};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			new org_bsonspec_BSONDecoder(details.input).getObject();
		}
	}
	,runCommand: function(command) {
		var _this = this.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = command;
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			return new org_bsonspec_BSONDecoder(details.input).getObject();
		} else {
			return null;
		}
	}
	,runScript: function(script) {
		var _this = this.cmd;
		var _this1 = _this.protocol;
		var collection = _this.fullname;
		var query = { 'eval' : script};
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		out.writeInt32(-1);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(_this1.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(_this1.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		_this1.socket.output.writeBytes(bytes,0,bytes.length);
		_this1.socket.output.flush();
		_this1.requestId++;
		var details = _this.protocol.read();
		if(details.numReturned == 1) {
			return new org_bsonspec_BSONDecoder(details.input).getObject();
		} else {
			return null;
		}
	}
	,__class__: org_mongodb_Database
};
var org_mongodb_Mongo = function(host,port) {
	if(port == null) {
		port = 27017;
	}
	if(host == null) {
		host = "localhost";
	}
	this.protocol = new org_mongodb_Protocol(host,port);
};
$hxClasses["org.mongodb.Mongo"] = org_mongodb_Mongo;
org_mongodb_Mongo.__name__ = ["org","mongodb","Mongo"];
org_mongodb_Mongo.prototype = {
	protocol: null
	,getDB: function(name) {
		return new org_mongodb_Database(this.protocol,name);
	}
	,close: function() {
		this.protocol.close();
	}
	,__class__: org_mongodb_Mongo
};
var org_mongodb_ReplyFlags = { __ename__ : true, __constructs__ : ["CursorNotFound","QueryFailure","ShardConfigStale","AwaitCapable"] };
org_mongodb_ReplyFlags.CursorNotFound = ["CursorNotFound",0];
org_mongodb_ReplyFlags.CursorNotFound.toString = $estr;
org_mongodb_ReplyFlags.CursorNotFound.__enum__ = org_mongodb_ReplyFlags;
org_mongodb_ReplyFlags.QueryFailure = ["QueryFailure",1];
org_mongodb_ReplyFlags.QueryFailure.toString = $estr;
org_mongodb_ReplyFlags.QueryFailure.__enum__ = org_mongodb_ReplyFlags;
org_mongodb_ReplyFlags.ShardConfigStale = ["ShardConfigStale",2];
org_mongodb_ReplyFlags.ShardConfigStale.toString = $estr;
org_mongodb_ReplyFlags.ShardConfigStale.__enum__ = org_mongodb_ReplyFlags;
org_mongodb_ReplyFlags.AwaitCapable = ["AwaitCapable",3];
org_mongodb_ReplyFlags.AwaitCapable.toString = $estr;
org_mongodb_ReplyFlags.AwaitCapable.__enum__ = org_mongodb_ReplyFlags;
var org_mongodb_Protocol = function(host,port) {
	if(port == null) {
		port = 27017;
	}
	if(host == null) {
		host = "localhost";
	}
	this.requestId = 0;
	this.socket = new sys.net.Socket();
	this.socket.connect(new sys.net.Host(host),port);
};
$hxClasses["org.mongodb.Protocol"] = org_mongodb_Protocol;
org_mongodb_Protocol.__name__ = ["org","mongodb","Protocol"];
org_mongodb_Protocol.prototype = {
	socket: null
	,requestId: null
	,close: function() {
		this.socket.close();
	}
	,query: function(collection,query,returnFields,skip,number,flags) {
		if(flags == null) {
			flags = 0;
		}
		if(number == null) {
			number = 0;
		}
		if(skip == null) {
			skip = 0;
		}
		var out = new haxe_io_BytesOutput();
		out.writeInt32(flags);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(skip);
		out.writeInt32(number);
		if(query == null) {
			query = { };
		}
		var d = new org_bsonspec_BSONEncoder(query).getBytes();
		out.writeBytes(d,0,d.length);
		if(returnFields != null) {
			var d1 = new org_bsonspec_BSONEncoder(returnFields).getBytes();
			out.writeBytes(d1,0,d1.length);
		}
		var data = out.getBytes();
		if(this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2004);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		this.socket.output.writeBytes(bytes,0,bytes.length);
		this.socket.output.flush();
		this.requestId++;
	}
	,getMore: function(collection,cursorId,number) {
		if(number == null) {
			number = 0;
		}
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(number);
		out.writeInt32(cursorId.high);
		out.writeInt32(cursorId.low);
		var data = out.getBytes();
		if(this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2005);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		this.socket.output.writeBytes(bytes,0,bytes.length);
		this.socket.output.flush();
		this.requestId++;
	}
	,insert: function(collection,fields) {
		var _gthis = this;
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		var writeField = function(field) {
			if(!Object.prototype.hasOwnProperty.call(field,"_id")) {
				if(!js_Boot.__instanceof(field,org_bsonspec_BSONDocument)) {
					field._id = new org_bsonspec_ObjectID();
				} else if(!Lambda.exists({ iterator : ($_=(js_Boot.__cast(field , org_bsonspec_BSONDocument)),$bind($_,$_.nodes))},function(node) {
					return node.key == "_id";
				})) {
					(js_Boot.__cast(field , org_bsonspec_BSONDocument)).append("_id",new org_bsonspec_ObjectID());
				}
			}
			var d = new org_bsonspec_BSONEncoder(field).getBytes();
			out.writeBytes(d,0,d.length);
		};
		if((fields instanceof Array) && fields.__enum__ == null) {
			var list = js_Boot.__cast(fields , Array);
			var _g = 0;
			while(_g < list.length) {
				var field1 = list[_g];
				++_g;
				writeField(field1);
			}
		} else {
			writeField(fields);
		}
		var data = out.getBytes();
		if(this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2002);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		this.socket.output.writeBytes(bytes,0,bytes.length);
		this.socket.output.flush();
		this.requestId++;
	}
	,update: function(collection,select,fields,flags) {
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(flags);
		var d = new org_bsonspec_BSONEncoder(select).getBytes();
		out.writeBytes(d,0,d.length);
		var d1 = new org_bsonspec_BSONEncoder(fields).getBytes();
		out.writeBytes(d1,0,d1.length);
		var data = out.getBytes();
		if(this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2001);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		this.socket.output.writeBytes(bytes,0,bytes.length);
		this.socket.output.flush();
		this.requestId++;
	}
	,remove: function(collection,select) {
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeString(collection);
		out.writeByte(0);
		out.writeInt32(0);
		var d = new org_bsonspec_BSONEncoder(select != null ? select : { }).getBytes();
		out.writeBytes(d,0,d.length);
		var data = out.getBytes();
		if(this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2006);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		this.socket.output.writeBytes(bytes,0,bytes.length);
		this.socket.output.flush();
		this.requestId++;
	}
	,killCursors: function(cursors) {
		var out = new haxe_io_BytesOutput();
		out.writeInt32(0);
		out.writeInt32(cursors.length);
		var _g = 0;
		while(_g < cursors.length) {
			var cursor = cursors[_g];
			++_g;
			out.writeInt32(cursor.high);
			out.writeInt32(cursor.low);
		}
		var data = out.getBytes();
		if(this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out1 = new haxe_io_BytesOutput();
		out1.writeInt32(data.length + 16);
		out1.writeInt32(this.requestId);
		out1.writeInt32(0);
		out1.writeInt32(2007);
		out1.writeBytes(data,0,data.length);
		var bytes = out1.getBytes();
		this.socket.output.writeBytes(bytes,0,bytes.length);
		this.socket.output.flush();
		this.requestId++;
	}
	,getOne: function() {
		var details = this.read();
		if(details.numReturned == 1) {
			return new org_bsonspec_BSONDecoder(details.input).getObject();
		} else {
			return null;
		}
	}
	,response: function(documents) {
		var details = this.read();
		var _g1 = 0;
		var _g = details.numReturned;
		while(_g1 < _g) {
			var i = _g1++;
			documents.push(new org_bsonspec_BSONDecoder(details.input).getObject());
		}
		return details.cursorId;
	}
	,read: function() {
		var length = 0;
		var input = null;
		length = this.socket.input.readInt32();
		input = this.socket.input;
		var details = input.readInt32();
		var details1 = input.readInt32();
		var details2 = input.readInt32();
		var details3 = input.readInt32();
		var high = input.readInt32();
		var low = input.readInt32();
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		var details4 = { length : length, input : input, requestId : details, responseTo : details1, opcode : details2, flags : details3, cursorId : this1, startingFrom : input.readInt32(), numReturned : input.readInt32()};
		var this2 = details4.flags;
		var flags = this2;
		if((flags & 1 << org_mongodb_ReplyFlags.CursorNotFound[1]) != 0 && details4.numReturned != 0) {
			throw new js__$Boot_HaxeError("Cursor not found");
		}
		if((flags & 1 << org_mongodb_ReplyFlags.QueryFailure[1]) != 0) {
			console.log(new org_bsonspec_BSONDecoder(input).getObject());
			throw new js__$Boot_HaxeError("Query failed");
		}
		return details4;
	}
	,readInt64: function(input) {
		var high = input.readInt32();
		var low = input.readInt32();
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	,request: function(opcode,data,responseTo) {
		if(responseTo == null) {
			responseTo = 0;
		}
		if(this.socket == null) {
			throw new js__$Boot_HaxeError("Not connected");
		}
		var out = new haxe_io_BytesOutput();
		out.writeInt32(data.length + 16);
		out.writeInt32(this.requestId);
		out.writeInt32(responseTo);
		out.writeInt32(opcode);
		out.writeBytes(data,0,data.length);
		var bytes = out.getBytes();
		this.socket.output.writeBytes(bytes,0,bytes.length);
		this.socket.output.flush();
		return this.requestId++;
	}
	,writeDocument: function(out,data) {
		var d = new org_bsonspec_BSONEncoder(data).getBytes();
		out.writeBytes(d,0,d.length);
	}
	,writeInt32: function(out,value) {
		out.writeInt32(value);
	}
	,readInt32: function(input) {
		return input.readInt32();
	}
	,__class__: org_mongodb_Protocol
};
var sys_FileSystem = function() { };
$hxClasses["sys.FileSystem"] = sys_FileSystem;
sys_FileSystem.__name__ = ["sys","FileSystem"];
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _ ) {
		return false;
	}
};
var tjson_TJSON = function() { };
$hxClasses["tjson.TJSON"] = tjson_TJSON;
tjson_TJSON.__name__ = ["tjson","TJSON"];
tjson_TJSON.parse = function(json,fileName,stringProcessor) {
	if(fileName == null) {
		fileName = "JSON Data";
	}
	var t = new tjson_TJSONParser(json,fileName,stringProcessor);
	return t.doParse();
};
tjson_TJSON.encode = function(obj,style,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	var t = new tjson_TJSONEncoder(useCache);
	return t.doEncode(obj,style);
};
var tjson_TJSONParser = function(vjson,vfileName,stringProcessor) {
	if(vfileName == null) {
		vfileName = "JSON Data";
	}
	this.json = vjson;
	this.fileName = vfileName;
	this.currentLine = 1;
	this.lastSymbolQuoted = false;
	this.pos = 0;
	this.floatRegex = new EReg("^-?[0-9]*\\.[0-9]+$","");
	this.intRegex = new EReg("^-?[0-9]+$","");
	this.strProcessor = stringProcessor == null ? $bind(this,this.defaultStringProcessor) : stringProcessor;
	this.cache = [];
};
$hxClasses["tjson.TJSONParser"] = tjson_TJSONParser;
tjson_TJSONParser.__name__ = ["tjson","TJSONParser"];
tjson_TJSONParser.prototype = {
	pos: null
	,json: null
	,lastSymbolQuoted: null
	,fileName: null
	,currentLine: null
	,cache: null
	,floatRegex: null
	,intRegex: null
	,strProcessor: null
	,doParse: function() {
		try {
			var _g = this.getNextSymbol();
			switch(_g) {
			case "[":
				return this.doArray();
			case "{":
				return this.doObject();
			default:
				var s = _g;
				return this.convertSymbolToProperType(s);
			}
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				throw new js__$Boot_HaxeError(this.fileName + " on line " + this.currentLine + ": " + e);
			} else throw(e);
		}
	}
	,doObject: function() {
		var o = { };
		var val = "";
		var key;
		var isClassOb = false;
		this.cache.push(o);
		while(this.pos < this.json.length) {
			key = this.getNextSymbol();
			if(key == "," && !this.lastSymbolQuoted) {
				continue;
			}
			if(key == "}" && !this.lastSymbolQuoted) {
				if(isClassOb && o.TJ_unserialize != null) {
					o.TJ_unserialize();
				}
				return o;
			}
			var seperator = this.getNextSymbol();
			if(seperator != ":") {
				throw new js__$Boot_HaxeError("Expected ':' but got '" + seperator + "' instead.");
			}
			var v = this.getNextSymbol();
			if(key == "_hxcls") {
				var cls = Type.resolveClass(v);
				if(cls == null) {
					throw new js__$Boot_HaxeError("Invalid class name - " + v);
				}
				o = Type.createEmptyInstance(cls);
				this.cache.pop();
				this.cache.push(o);
				isClassOb = true;
				continue;
			}
			if(v == "{" && !this.lastSymbolQuoted) {
				val = this.doObject();
			} else if(v == "[" && !this.lastSymbolQuoted) {
				val = this.doArray();
			} else {
				val = this.convertSymbolToProperType(v);
			}
			o[key] = val;
		}
		throw new js__$Boot_HaxeError("Unexpected end of file. Expected '}'");
	}
	,doArray: function() {
		var a = [];
		var val;
		while(this.pos < this.json.length) {
			val = this.getNextSymbol();
			if(val == "," && !this.lastSymbolQuoted) {
				continue;
			} else if(val == "]" && !this.lastSymbolQuoted) {
				return a;
			} else if(val == "{" && !this.lastSymbolQuoted) {
				val = this.doObject();
			} else if(val == "[" && !this.lastSymbolQuoted) {
				val = this.doArray();
			} else {
				val = this.convertSymbolToProperType(val);
			}
			a.push(val);
		}
		throw new js__$Boot_HaxeError("Unexpected end of file. Expected ']'");
	}
	,convertSymbolToProperType: function(symbol) {
		if(this.lastSymbolQuoted) {
			if(StringTools.startsWith(symbol,tjson_TJSON.OBJECT_REFERENCE_PREFIX)) {
				var idx = Std.parseInt(HxOverrides.substr(symbol,tjson_TJSON.OBJECT_REFERENCE_PREFIX.length,null));
				return this.cache[idx];
			}
			return symbol;
		}
		if(this.looksLikeFloat(symbol)) {
			return parseFloat(symbol);
		}
		if(this.looksLikeInt(symbol)) {
			return Std.parseInt(symbol);
		}
		if(symbol.toLowerCase() == "true") {
			return true;
		}
		if(symbol.toLowerCase() == "false") {
			return false;
		}
		if(symbol.toLowerCase() == "null") {
			return null;
		}
		return symbol;
	}
	,looksLikeFloat: function(s) {
		if(!this.floatRegex.match(s)) {
			if(this.intRegex.match(s)) {
				var intStr = this.intRegex.matched(0);
				if(HxOverrides.cca(intStr,0) == 45) {
					return intStr > "-2147483648";
				} else {
					return intStr > "2147483647";
				}
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,looksLikeInt: function(s) {
		return this.intRegex.match(s);
	}
	,getNextSymbol: function() {
		this.lastSymbolQuoted = false;
		var c = "";
		var inQuote = false;
		var quoteType = "";
		var symbol = "";
		var inEscape = false;
		var inSymbol = false;
		var inLineComment = false;
		var inBlockComment = false;
		while(this.pos < this.json.length) {
			c = this.json.charAt(this.pos++);
			if(c == "\n" && !inSymbol) {
				this.currentLine++;
			}
			if(inLineComment) {
				if(c == "\n" || c == "\r") {
					inLineComment = false;
					this.pos++;
				}
				continue;
			}
			if(inBlockComment) {
				if(c == "*" && this.json.charAt(this.pos) == "/") {
					inBlockComment = false;
					this.pos++;
				}
				continue;
			}
			if(inQuote) {
				if(inEscape) {
					inEscape = false;
					if(c == "'" || c == "\"") {
						symbol += c;
						continue;
					}
					if(c == "t") {
						symbol += "\t";
						continue;
					}
					if(c == "n") {
						symbol += "\n";
						continue;
					}
					if(c == "\\") {
						symbol += "\\";
						continue;
					}
					if(c == "r") {
						symbol += "\r";
						continue;
					}
					if(c == "/") {
						symbol += "/";
						continue;
					}
					if(c == "u") {
						var hexValue = 0;
						var _g = 0;
						while(_g < 4) {
							var i = _g++;
							if(this.pos >= this.json.length) {
								throw new js__$Boot_HaxeError("Unfinished UTF8 character");
							}
							var nc = HxOverrides.cca(this.json,this.pos++);
							hexValue <<= 4;
							if(nc >= 48 && nc <= 57) {
								hexValue += nc - 48;
							} else if(nc >= 65 && nc <= 70) {
								hexValue += 10 + nc - 65;
							} else if(nc >= 97 && nc <= 102) {
								hexValue += 10 + nc - 95;
							} else {
								throw new js__$Boot_HaxeError("Not a hex digit");
							}
						}
						var utf = new haxe_Utf8();
						utf.__b += String.fromCharCode(hexValue);
						symbol += utf.__b;
						continue;
					}
					throw new js__$Boot_HaxeError("Invalid escape sequence '\\" + c + "'");
				} else {
					if(c == "\\") {
						inEscape = true;
						continue;
					}
					if(c == quoteType) {
						return symbol;
					}
					symbol += c;
					continue;
				}
			} else if(c == "/") {
				var c2 = this.json.charAt(this.pos);
				if(c2 == "/") {
					inLineComment = true;
					this.pos++;
					continue;
				} else if(c2 == "*") {
					inBlockComment = true;
					this.pos++;
					continue;
				}
			}
			if(inSymbol) {
				if(c == " " || c == "\n" || c == "\r" || c == "\t" || c == "," || c == ":" || c == "}" || c == "]") {
					this.pos--;
					return symbol;
				} else {
					symbol += c;
					continue;
				}
			} else {
				if(c == " " || c == "\t" || c == "\n" || c == "\r") {
					continue;
				}
				if(c == "{" || c == "}" || c == "[" || c == "]" || c == "," || c == ":") {
					return c;
				}
				if(c == "'" || c == "\"") {
					inQuote = true;
					quoteType = c;
					this.lastSymbolQuoted = true;
					continue;
				} else {
					inSymbol = true;
					symbol = c;
					continue;
				}
			}
		}
		if(inQuote) {
			throw new js__$Boot_HaxeError("Unexpected end of data. Expected ( " + quoteType + " )");
		}
		return symbol;
	}
	,defaultStringProcessor: function(str) {
		return str;
	}
	,__class__: tjson_TJSONParser
};
var tjson_TJSONEncoder = function(useCache) {
	if(useCache == null) {
		useCache = true;
	}
	this.uCache = useCache;
	if(this.uCache) {
		this.cache = [];
	}
};
$hxClasses["tjson.TJSONEncoder"] = tjson_TJSONEncoder;
tjson_TJSONEncoder.__name__ = ["tjson","TJSONEncoder"];
tjson_TJSONEncoder.prototype = {
	cache: null
	,uCache: null
	,doEncode: function(obj,style) {
		if(!Reflect.isObject(obj)) {
			throw new js__$Boot_HaxeError("Provided object is not an object.");
		}
		var st;
		if(js_Boot.__instanceof(style,tjson_EncodeStyle)) {
			st = style;
		} else if(style == "fancy") {
			st = new tjson_FancyStyle();
		} else {
			st = new tjson_SimpleStyle();
		}
		var buffer_b = "";
		if((obj instanceof Array) && obj.__enum__ == null || js_Boot.__instanceof(obj,List)) {
			buffer_b += Std.string(this.encodeIterable(obj,st,0));
		} else if(js_Boot.__instanceof(obj,haxe_ds_StringMap)) {
			buffer_b += Std.string(this.encodeMap(obj,st,0));
		} else {
			this.cacheEncode(obj);
			buffer_b += Std.string(this.encodeObject(obj,st,0));
		}
		return buffer_b;
	}
	,encodeObject: function(obj,style,depth) {
		var buffer_b = "";
		buffer_b += Std.string(style.beginObject(depth));
		var fieldCount = 0;
		var fields;
		var dontEncodeFields = null;
		var o = obj;
		var cls = o == null ? null : js_Boot.getClass(o);
		if(cls != null) {
			fields = Type.getInstanceFields(cls);
		} else {
			fields = Reflect.fields(obj);
		}
		var _g = Type["typeof"](obj);
		if(_g[1] == 6) {
			var c = _g[2];
			if(fieldCount++ > 0) {
				buffer_b += Std.string(style.entrySeperator(depth));
			} else {
				buffer_b += Std.string(style.firstEntry(depth));
			}
			buffer_b += Std.string("\"_hxcls\"" + style.keyValueSeperator(depth));
			buffer_b += Std.string(this.encodeValue(Type.getClassName(c),style,depth));
			if(obj.TJ_noEncode != null) {
				dontEncodeFields = obj.TJ_noEncode();
			}
		}
		var _g1 = 0;
		while(_g1 < fields.length) {
			var field = fields[_g1];
			++_g1;
			if(dontEncodeFields != null && dontEncodeFields.indexOf(field) >= 0) {
				continue;
			}
			var value = Reflect.field(obj,field);
			var vStr = this.encodeValue(value,style,depth);
			if(vStr != null) {
				if(fieldCount++ > 0) {
					buffer_b += Std.string(style.entrySeperator(depth));
				} else {
					buffer_b += Std.string(style.firstEntry(depth));
				}
				buffer_b += Std.string("\"" + field + "\"" + style.keyValueSeperator(depth) + vStr);
			}
		}
		buffer_b += Std.string(style.endObject(depth));
		return buffer_b;
	}
	,encodeMap: function(obj,style,depth) {
		var buffer_b = "";
		buffer_b += Std.string(style.beginObject(depth));
		var fieldCount = 0;
		var field = obj.keys();
		while(field.hasNext()) {
			var field1 = field.next();
			if(fieldCount++ > 0) {
				buffer_b += Std.string(style.entrySeperator(depth));
			} else {
				buffer_b += Std.string(style.firstEntry(depth));
			}
			var value = obj.get(field1);
			buffer_b += Std.string("\"" + field1 + "\"" + style.keyValueSeperator(depth));
			buffer_b += Std.string(this.encodeValue(value,style,depth));
		}
		buffer_b += Std.string(style.endObject(depth));
		return buffer_b;
	}
	,encodeIterable: function(obj,style,depth) {
		var buffer_b = "";
		buffer_b += Std.string(style.beginArray(depth));
		var fieldCount = 0;
		var value = $iterator(obj)();
		while(value.hasNext()) {
			var value1 = value.next();
			if(fieldCount++ > 0) {
				buffer_b += Std.string(style.entrySeperator(depth));
			} else {
				buffer_b += Std.string(style.firstEntry(depth));
			}
			buffer_b += Std.string(this.encodeValue(value1,style,depth));
		}
		buffer_b += Std.string(style.endArray(depth));
		return buffer_b;
	}
	,cacheEncode: function(value) {
		if(!this.uCache) {
			return null;
		}
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var c = _g1++;
			if(this.cache[c] == value) {
				return "\"" + tjson_TJSON.OBJECT_REFERENCE_PREFIX + c + "\"";
			}
		}
		this.cache.push(value);
		return null;
	}
	,encodeValue: function(value,style,depth) {
		if(typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number") {
			return value;
		} else if((value instanceof Array) && value.__enum__ == null || js_Boot.__instanceof(value,List)) {
			var v = value;
			return this.encodeIterable(v,style,depth + 1);
		} else if(js_Boot.__instanceof(value,List)) {
			var v1 = value;
			return this.encodeIterable(v1,style,depth + 1);
		} else if(js_Boot.__instanceof(value,haxe_ds_StringMap)) {
			return this.encodeMap(value,style,depth + 1);
		} else if(typeof(value) == "string") {
			return "\"" + StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(Std.string(value),"\\","\\\\"),"\n","\\n"),"\r","\\r"),"\"","\\\"") + "\"";
		} else if(typeof(value) == "boolean") {
			return value;
		} else if(Reflect.isObject(value)) {
			var ret = this.cacheEncode(value);
			if(ret != null) {
				return ret;
			}
			return this.encodeObject(value,style,depth + 1);
		} else if(value == null) {
			return "null";
		} else {
			return null;
		}
	}
	,__class__: tjson_TJSONEncoder
};
var tjson_EncodeStyle = function() { };
$hxClasses["tjson.EncodeStyle"] = tjson_EncodeStyle;
tjson_EncodeStyle.__name__ = ["tjson","EncodeStyle"];
tjson_EncodeStyle.prototype = {
	beginObject: null
	,endObject: null
	,beginArray: null
	,endArray: null
	,firstEntry: null
	,entrySeperator: null
	,keyValueSeperator: null
	,__class__: tjson_EncodeStyle
};
var tjson_SimpleStyle = function() {
};
$hxClasses["tjson.SimpleStyle"] = tjson_SimpleStyle;
tjson_SimpleStyle.__name__ = ["tjson","SimpleStyle"];
tjson_SimpleStyle.__interfaces__ = [tjson_EncodeStyle];
tjson_SimpleStyle.prototype = {
	beginObject: function(depth) {
		return "{";
	}
	,endObject: function(depth) {
		return "}";
	}
	,beginArray: function(depth) {
		return "[";
	}
	,endArray: function(depth) {
		return "]";
	}
	,firstEntry: function(depth) {
		return "";
	}
	,entrySeperator: function(depth) {
		return ",";
	}
	,keyValueSeperator: function(depth) {
		return ":";
	}
	,__class__: tjson_SimpleStyle
};
var tjson_FancyStyle = function(tab) {
	if(tab == null) {
		tab = "    ";
	}
	this.tab = tab;
	this.charTimesNCache = [""];
};
$hxClasses["tjson.FancyStyle"] = tjson_FancyStyle;
tjson_FancyStyle.__name__ = ["tjson","FancyStyle"];
tjson_FancyStyle.__interfaces__ = [tjson_EncodeStyle];
tjson_FancyStyle.prototype = {
	tab: null
	,beginObject: function(depth) {
		return "{\n";
	}
	,endObject: function(depth) {
		return "\n" + this.charTimesN(depth) + "}";
	}
	,beginArray: function(depth) {
		return "[\n";
	}
	,endArray: function(depth) {
		return "\n" + this.charTimesN(depth) + "]";
	}
	,firstEntry: function(depth) {
		return this.charTimesN(depth + 1) + " ";
	}
	,entrySeperator: function(depth) {
		return "\n" + this.charTimesN(depth + 1) + ",";
	}
	,keyValueSeperator: function(depth) {
		return " : ";
	}
	,charTimesNCache: null
	,charTimesN: function(n) {
		if(n < this.charTimesNCache.length) {
			return this.charTimesNCache[n];
		} else {
			var tmp = this.charTimesN(n - 1);
			return this.charTimesNCache[n] = tmp + this.tab;
		}
	}
	,__class__: tjson_FancyStyle
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
org_bsonspec_ObjectID.pid = Std.random(65536);
org_bsonspec_ObjectID.sequence = 0;
org_bsonspec_ObjectID.machine = haxe_io_Bytes.ofString("flash");
org_mongodb_Cursor.TailableCursor = 2;
org_mongodb_Cursor.SlaveOk = 4;
org_mongodb_Cursor.OplogReplay = 8;
org_mongodb_Cursor.NoCursorTimeout = 16;
org_mongodb_Cursor.AwaitData = 32;
org_mongodb_Cursor.Exhaust = 64;
org_mongodb_Cursor.Partial = 128;
org_mongodb_Protocol.OP_REPLY = 1;
org_mongodb_Protocol.OP_MSG = 1000;
org_mongodb_Protocol.OP_UPDATE = 2001;
org_mongodb_Protocol.OP_INSERT = 2002;
org_mongodb_Protocol.OP_QUERY = 2004;
org_mongodb_Protocol.OP_GETMORE = 2005;
org_mongodb_Protocol.OP_DELETE = 2006;
org_mongodb_Protocol.OP_KILL_CURSORS = 2007;
tjson_TJSON.OBJECT_REFERENCE_PREFIX = "@~obRef#";
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
